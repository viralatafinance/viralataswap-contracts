{
  "address": "0x44dDF7014dC7f3F6A7a12f7C9BC8A12f7fC5e4fd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAuroERC20",
          "name": "_auro",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_auroPerBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "AllocPointsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "DevAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "EmissionRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "FeeAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "MetaTxnsDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "MetaTxnsEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOperator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOperator",
          "type": "address"
        }
      ],
      "name": "OperatorTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountLockedUp",
          "type": "uint256"
        }
      ],
      "name": "RewardLockedUp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_DEPOSIT_FEE_RATE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_HARVEST_INTERVAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_depositFeeBP",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_harvestInterval",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auro",
      "outputs": [
        {
          "internalType": "contract IAuroERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auroPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "canHarvest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableMetaTxns",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableMetaTxns",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metaTxnsEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingAuro",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accAuroPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "depositFeeBP",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "harvestInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalLp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_depositFeeBP",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_harvestInterval",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_devAddress",
          "type": "address"
        }
      ],
      "name": "setDevAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        }
      ],
      "name": "setFeeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startFarming",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAuroInPools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLockedUpRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOperator",
          "type": "address"
        }
      ],
      "name": "transferOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "updateAllocPoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auroPerBlock",
          "type": "uint256"
        }
      ],
      "name": "updateEmissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardLockedUp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nextHarvestUntil",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2ef04a2eaf89c8e7f3e1cdfd3a6061cba1f1f211aa19cd4f0eb02af59a6ca652",
  "receipt": {
    "to": null,
    "from": "0xA384Ad88178e3f42a31d25f43cD1B41EEc006b9F",
    "contractAddress": "0x44dDF7014dC7f3F6A7a12f7C9BC8A12f7fC5e4fd",
    "transactionIndex": 45,
    "gasUsed": "3324354",
    "logsBloom": "0x
    "blockHash": "0x40a625078711bf213f69e5ef84035952339242b82d077b7edb23b2a4c13375f2",
    "transactionHash": "0x2ef04a2eaf89c8e7f3e1cdfd3a6061cba1f1f211aa19cd4f0eb02af59a6ca652",
    "logs": [
      {
        "transactionIndex": 45,
        "blockNumber": 10005312,
        "transactionHash": "0x2ef04a2eaf89c8e7f3e1cdfd3a6061cba1f1f211aa19cd4f0eb02af59a6ca652",
        "address": "0x44dDF7014dC7f3F6A7a12f7C9BC8A12f7fC5e4fd",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a384ad88178e3f42a31d25f43cd1b41eec006b9f"
        ],
        "data": "0x",
        "logIndex": 123,
        "blockHash": "0x40a625078711bf213f69e5ef84035952339242b82d077b7edb23b2a4c13375f2"
      },
      {
        "transactionIndex": 45,
        "blockNumber": 10005312,
        "transactionHash": "0x2ef04a2eaf89c8e7f3e1cdfd3a6061cba1f1f211aa19cd4f0eb02af59a6ca652",
        "address": "0x44dDF7014dC7f3F6A7a12f7C9BC8A12f7fC5e4fd",
        "topics": [
          "0x74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a384ad88178e3f42a31d25f43cd1b41eec006b9f"
        ],
        "data": "0x",
        "logIndex": 124,
        "blockHash": "0x40a625078711bf213f69e5ef84035952339242b82d077b7edb23b2a4c13375f2"
      }
    ],
    "blockNumber": 10005312,
    "cumulativeGasUsed": "9998670",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf23011Fe65b68909F12253097CfbA6B3ea3d9C1A",
    "60000000000000000000"
  ],
  "solcInputHash": "ac675a95eec1956d0c4bfd9d6bcbb6f7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAuroERC20\",\"name\":\"_auro\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_auroPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"AllocPointsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"DevAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"EmissionRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"FeeAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"MetaTxnsDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"MetaTxnsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLockedUp\",\"type\":\"uint256\"}],\"name\":\"RewardLockedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_DEPOSIT_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_HARVEST_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auro\",\"outputs\":[{\"internalType\":\"contract IAuroERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auroPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canHarvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableMetaTxns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMetaTxns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metaTxnsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingAuro\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accAuroPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAuroInPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedUpRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"updateAllocPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auroPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardLockedUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextHarvestUntil\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/AuroDistributor.sol\":\"AuroDistributor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/farm/AuroDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./IAuroERC20.sol\\\";\\r\\n\\r\\ncontract AuroDistributor is Ownable, ReentrancyGuard {\\r\\n\\r\\n    // remember to change for mainnet deploy\\r\\n    address constant _trustedForwarder = 0xA58B6fC9264ce507d0B0B477ceE31674341CB27e; //BSC TRUSTED FORWARDER\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256 amount; // How many LP tokens the user has provided.\\r\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\r\\n        uint256 rewardLockedUp; // Reward locked up.\\r\\n        uint256 nextHarvestUntil; // When can the user harvest again.\\r\\n    }\\r\\n\\r\\n    // Info of each pool.\\r\\n    struct PoolInfo {\\r\\n        IERC20 lpToken; // Address of LP token contract.\\r\\n        uint256 allocPoint; // How many allocation points assigned to this pool. AURO to distribute per block.\\r\\n        uint256 lastRewardBlock; // Last block number that AURO distribution occurs.\\r\\n        uint256 accAuroPerShare; // Accumulated AURO per share, times 1e12. See below.\\r\\n        uint16 depositFeeBP; // Deposit fee in basis points\\r\\n        uint256 harvestInterval; // Harvest interval in seconds\\r\\n        uint256 totalLp; // Total token in Pool\\r\\n    }\\r\\n\\r\\n    IAuroERC20 public auro;\\r\\n\\r\\n    // The operator can only update EmissionRate and AllocPoint to protect tokenomics\\r\\n    //i.e some wrong setting and a pools get too much allocation accidentally\\r\\n    address private _operator;\\r\\n\\r\\n    // Dev address.\\r\\n    address public devAddress;\\r\\n\\r\\n    // Deposit Fee address\\r\\n    address public feeAddress;\\r\\n\\r\\n    // AURO tokens created per block\\r\\n    uint256 public auroPerBlock;\\r\\n\\r\\n    // Max harvest interval: 14 days\\r\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\r\\n\\r\\n    // Maximum deposit fee rate: 10%\\r\\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\\r\\n\\r\\n    // Info of each pool\\r\\n    PoolInfo[] public poolInfo;\\r\\n\\r\\n    // Info of each user that stakes LP tokens.\\r\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\r\\n\\r\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\r\\n    uint256 public totalAllocPoint = 0;\\r\\n\\r\\n    // The block number when AURO mining starts.\\r\\n    uint256 public startBlock;\\r\\n\\r\\n    // Total locked up rewards\\r\\n    uint256 public totalLockedUpRewards;\\r\\n\\r\\n    // Total AURO in AURO Pools (can be multiple pools)\\r\\n    uint256 public totalAuroInPools = 0;\\r\\n\\r\\n    // Control support for EIP-2771 Meta Transactions\\r\\n    bool public metaTxnsEnabled = false;\\r\\n\\r\\n\\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event EmissionRateUpdated(address indexed caller, uint256 previousAmount, uint256 newAmount);\\r\\n    event RewardLockedUp(address indexed user, uint256 indexed pid, uint256 amountLockedUp);\\r\\n    event OperatorTransferred(address indexed previousOperator, address indexed newOperator);\\r\\n    event DevAddressChanged(address indexed caller, address oldAddress, address newAddress);\\r\\n    event FeeAddressChanged(address indexed caller, address oldAddress, address newAddress);\\r\\n    event AllocPointsUpdated(address indexed caller, uint256 previousAmount, uint256 newAmount);\\r\\n    event MetaTxnsEnabled(address indexed caller);\\r\\n    event MetaTxnsDisabled(address indexed caller);\\r\\n\\r\\n    modifier onlyOperator() {\\r\\n        require(_operator == msg.sender, \\\"Operator: caller is not the operator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        IAuroERC20 _auro,\\r\\n        uint256 _auroPerBlock\\r\\n    ) {\\r\\n        //StartBlock always many years later from contract construct, will be set later in StartFarming function\\r\\n        startBlock = block.number + (10 * 365 * 24 * 60 * 60);\\r\\n\\r\\n        auro = _auro;\\r\\n        auroPerBlock = _auroPerBlock;\\r\\n\\r\\n        devAddress = msg.sender;\\r\\n        feeAddress = msg.sender;\\r\\n        _operator = msg.sender;\\r\\n        emit OperatorTransferred(address(0), _operator);\\r\\n    }\\r\\n\\r\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\r\\n        return metaTxnsEnabled && forwarder == _trustedForwarder;\\r\\n    }\\r\\n\\r\\n    function _msgSender() internal view virtual override returns (address sender) {\\r\\n        if (isTrustedForwarder(msg.sender)) {\\r\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\r\\n            assembly {\\r\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\r\\n            }\\r\\n        } else {\\r\\n            return super._msgSender();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\r\\n        if (isTrustedForwarder(msg.sender)) {\\r\\n            return msg.data[:msg.data.length - 20];\\r\\n        } else {\\r\\n            return super._msgData();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function operator() public view returns (address) {\\r\\n        return _operator;\\r\\n    }\\r\\n\\r\\n    // Return reward multiplier over the given _from to _to block.\\r\\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\\r\\n        return _to.sub(_from);\\r\\n    }\\r\\n\\r\\n    function transferOperator(address newOperator) public onlyOperator {\\r\\n        require(newOperator != address(0), \\\"TransferOperator: new operator is the zero address\\\");\\r\\n        emit OperatorTransferred(_operator, newOperator);\\r\\n        _operator = newOperator;\\r\\n    }\\r\\n\\r\\n    // Set farming start, can call only once\\r\\n    function startFarming() public onlyOwner {\\r\\n        require(block.number < startBlock, \\\"Error::Farm started already\\\");\\r\\n\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            PoolInfo storage pool = poolInfo[pid];\\r\\n            pool.lastRewardBlock = block.number;\\r\\n        }\\r\\n\\r\\n        startBlock = block.number;\\r\\n    }\\r\\n\\r\\n    function poolLength() external view returns (uint256) {\\r\\n        return poolInfo.length;\\r\\n    }\\r\\n\\r\\n    // Add a new lp to the pool. Can only be called by the owner.\\r\\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\\r\\n    function add(\\r\\n        uint256 _allocPoint,\\r\\n        IERC20 _lpToken,\\r\\n        uint16 _depositFeeBP,\\r\\n        uint256 _harvestInterval,\\r\\n        bool _withUpdate\\r\\n    ) public onlyOwner {\\r\\n        require(_depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE, \\\"add: deposit fee too high\\\");\\r\\n        require(_harvestInterval <= MAXIMUM_HARVEST_INTERVAL, \\\"add: invalid harvest interval\\\");\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\r\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\r\\n        poolInfo.push(PoolInfo({lpToken: _lpToken, allocPoint: _allocPoint, lastRewardBlock: lastRewardBlock, accAuroPerShare: 0, depositFeeBP: _depositFeeBP, harvestInterval: _harvestInterval, totalLp: 0}));\\r\\n    }\\r\\n\\r\\n    // Update the given pool's AURO allocation point and deposit fee. Can only be called by the owner.\\r\\n    function set(\\r\\n        uint256 _pid,\\r\\n        uint256 _allocPoint,\\r\\n        uint16 _depositFeeBP,\\r\\n        uint256 _harvestInterval,\\r\\n        bool _withUpdate\\r\\n    ) public onlyOwner {\\r\\n        require(_depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE, \\\"set: deposit fee too high\\\");\\r\\n        require(_harvestInterval <= MAXIMUM_HARVEST_INTERVAL, \\\"set: invalid harvest interval\\\");\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\r\\n        poolInfo[_pid].allocPoint = _allocPoint;\\r\\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\\r\\n        poolInfo[_pid].harvestInterval = _harvestInterval;\\r\\n    }\\r\\n\\r\\n    // View function to see pending AURO on frontend.\\r\\n    function pendingAuro(uint256 _pid, address _user) external view returns (uint256) {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        uint256 accAuroPerShare = pool.accAuroPerShare;\\r\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\r\\n\\r\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\r\\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\r\\n            uint256 auroReward = multiplier.mul(auroPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\r\\n            accAuroPerShare = accAuroPerShare.add(auroReward.mul(1e12).div(lpSupply));\\r\\n        }\\r\\n\\r\\n        uint256 pending = user.amount.mul(accAuroPerShare).div(1e12).sub(user.rewardDebt);\\r\\n        return pending.add(user.rewardLockedUp);\\r\\n    }\\r\\n\\r\\n    // View function to see if user can harvest AURO.\\r\\n    function canHarvest(uint256 _pid, address _user) public view returns (bool) {\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        return block.number >= startBlock && block.timestamp >= user.nextHarvestUntil;\\r\\n    }\\r\\n\\r\\n    // Update reward vairables for all pools. Be careful of gas spending!\\r\\n    function massUpdatePools() public {\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            updatePool(pid);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Update reward variables of the given pool to be up-to-date.\\r\\n    function updatePool(uint256 _pid) public {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if (block.number <= pool.lastRewardBlock) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 lpSupply = pool.totalLp;\\r\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\r\\n            pool.lastRewardBlock = block.number;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\r\\n        uint256 auroReward =\\r\\n            multiplier.mul(auroPerBlock).mul(pool.allocPoint).div(\\r\\n                totalAllocPoint\\r\\n            );\\r\\n\\r\\n        auro.mint(devAddress, auroReward.div(10));\\r\\n        auro.mint(address(this), auroReward);\\r\\n\\r\\n        pool.accAuroPerShare = pool.accAuroPerShare.add(\\r\\n            auroReward.mul(1e12).div(pool.totalLp)\\r\\n        );\\r\\n        pool.lastRewardBlock = block.number;\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n    // Deposit LP tokens to MasterChef for AURO allocation.\\r\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\\r\\n        require(block.number >= startBlock, \\\"AuroDistributor: Can not deposit before start\\\");\\r\\n\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\r\\n\\r\\n        updatePool(_pid);\\r\\n\\r\\n        payOrLockupPendingAuro(_pid);\\r\\n\\r\\n        if (_amount > 0) {\\r\\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\\r\\n            pool.lpToken.safeTransferFrom(_msgSender(), address(this), _amount);\\r\\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\\r\\n\\r\\n            _amount = afterDeposit.sub(beforeDeposit);\\r\\n\\r\\n            if (pool.depositFeeBP > 0) {\\r\\n                uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\\r\\n                pool.lpToken.safeTransfer(feeAddress, depositFee);\\r\\n\\r\\n                _amount = _amount.sub(depositFee);\\r\\n            }\\r\\n\\r\\n            user.amount = user.amount.add(_amount);\\r\\n            pool.totalLp = pool.totalLp.add(_amount);\\r\\n\\r\\n            if (address(pool.lpToken) == address(auro)) {\\r\\n                totalAuroInPools = totalAuroInPools.add(_amount);\\r\\n            }\\r\\n        }\\r\\n        user.rewardDebt = user.amount.mul(pool.accAuroPerShare).div(1e12);\\r\\n        emit Deposit(_msgSender(), _pid, _amount);\\r\\n    }\\r\\n\\r\\n    // Withdraw tokens\\r\\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\r\\n\\r\\n        //this will make sure that user can only withdraw from his pool\\r\\n        require(user.amount >= _amount, \\\"Withdraw: User amount not enough\\\");\\r\\n\\r\\n        //Cannot withdraw more than pool's balance\\r\\n        require(pool.totalLp >= _amount, \\\"Withdraw: Pool total not enough\\\");\\r\\n\\r\\n        updatePool(_pid);\\r\\n\\r\\n        payOrLockupPendingAuro(_pid);\\r\\n\\r\\n        if (_amount > 0) {\\r\\n            user.amount = user.amount.sub(_amount);\\r\\n            pool.totalLp = pool.totalLp.sub(_amount);\\r\\n            if (address(pool.lpToken) == address(auro)) {\\r\\n                totalAuroInPools = totalAuroInPools.sub(_amount);\\r\\n            }\\r\\n            pool.lpToken.safeTransfer(_msgSender(), _amount);\\r\\n        }\\r\\n        user.rewardDebt = user.amount.mul(pool.accAuroPerShare).div(1e12);\\r\\n        emit Withdraw(_msgSender(), _pid, _amount);\\r\\n    }\\r\\n\\r\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\r\\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\r\\n        uint256 amount = user.amount;\\r\\n\\r\\n        //Cannot withdraw more than pool's balance\\r\\n        require(pool.totalLp >= amount, \\\"EmergencyWithdraw: Pool total not enough\\\");\\r\\n\\r\\n        user.amount = 0;\\r\\n        user.rewardDebt = 0;\\r\\n        user.rewardLockedUp = 0;\\r\\n        user.nextHarvestUntil = 0;\\r\\n        pool.totalLp = pool.totalLp.sub(amount);\\r\\n\\r\\n        if (address(pool.lpToken) == address(auro)) {\\r\\n            totalAuroInPools = totalAuroInPools.sub(amount);\\r\\n        }\\r\\n        pool.lpToken.safeTransfer(_msgSender(), amount);\\r\\n\\r\\n        emit EmergencyWithdraw(_msgSender(), _pid, amount);\\r\\n    }\\r\\n\\r\\n    // Pay or lockup pending AURO.\\r\\n    function payOrLockupPendingAuro(uint256 _pid) internal {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\r\\n\\r\\n        if (user.nextHarvestUntil == 0 && block.number >= startBlock) {\\r\\n            user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\\r\\n        }\\r\\n\\r\\n        uint256 pending = user.amount.mul(pool.accAuroPerShare).div(1e12).sub(user.rewardDebt);\\r\\n        if (canHarvest(_pid, _msgSender())) {\\r\\n            if (pending > 0 || user.rewardLockedUp > 0) {\\r\\n                uint256 totalRewards = pending.add(user.rewardLockedUp);\\r\\n\\r\\n                // reset lockup\\r\\n                totalLockedUpRewards = totalLockedUpRewards.sub(user.rewardLockedUp);\\r\\n                user.rewardLockedUp = 0;\\r\\n                user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\\r\\n\\r\\n                // send rewards\\r\\n                safeAuroTransfer(_msgSender(), totalRewards);\\r\\n            }\\r\\n        } else if (pending > 0) {\\r\\n            user.rewardLockedUp = user.rewardLockedUp.add(pending);\\r\\n            totalLockedUpRewards = totalLockedUpRewards.add(pending);\\r\\n            emit RewardLockedUp(_msgSender(), _pid, pending);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Safe AURO transfer function, just in case if rounding error causes pool do not have enough AURO.\\r\\n    function safeAuroTransfer(address _to, uint256 _amount) internal {\\r\\n        if (auro.balanceOf(address(this)) > totalAuroInPools) {\\r\\n            //auroBal = total AURO in AuroDistributor - total AURO in AURO pools, this will make sure that AuroDistributor never transfer rewards from deposited AURO pools\\r\\n            uint256 auroBal = auro.balanceOf(address(this)).sub(totalAuroInPools);\\r\\n            if (_amount >= auroBal) {\\r\\n                auro.transfer(_to, auroBal);\\r\\n            } else if (_amount > 0) {\\r\\n                auro.transfer(_to, _amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Update dev address by the previous dev.\\r\\n    function setDevAddress(address _devAddress) public {\\r\\n        require(_msgSender() == devAddress, \\\"setDevAddress: FORBIDDEN\\\");\\r\\n        require(_devAddress != address(0), \\\"setDevAddress: ZERO\\\");\\r\\n\\r\\n        emit DevAddressChanged(_msgSender(), devAddress, _devAddress);\\r\\n\\r\\n        devAddress = _devAddress;\\r\\n    }\\r\\n\\r\\n    function setFeeAddress(address _feeAddress) public {\\r\\n        require(_msgSender() == feeAddress, \\\"setFeeAddress: FORBIDDEN\\\");\\r\\n        require(_feeAddress != address(0), \\\"setFeeAddress: ZERO\\\");\\r\\n\\r\\n        emit FeeAddressChanged(_msgSender(), feeAddress, _feeAddress);\\r\\n\\r\\n        feeAddress = _feeAddress;\\r\\n    }\\r\\n\\r\\n    // Pancake has to add hidden dummy pools in order to alter the emission, here we make it simple and transparent to all.\\r\\n    function updateEmissionRate(uint256 _auroPerBlock) public onlyOperator {\\r\\n        massUpdatePools();\\r\\n\\r\\n        emit EmissionRateUpdated(msg.sender, auroPerBlock, _auroPerBlock);\\r\\n        auroPerBlock = _auroPerBlock;\\r\\n    }\\r\\n\\r\\n    function updateAllocPoint(\\r\\n        uint256 _pid,\\r\\n        uint256 _allocPoint,\\r\\n        bool _withUpdate\\r\\n    ) public onlyOperator {\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n\\r\\n        emit AllocPointsUpdated(_msgSender(), poolInfo[_pid].allocPoint, _allocPoint);\\r\\n\\r\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\r\\n        poolInfo[_pid].allocPoint = _allocPoint;\\r\\n    }\\r\\n\\r\\n    // Enable support for meta transactions\\r\\n    function enableMetaTxns() public onlyOperator {\\r\\n        require(!metaTxnsEnabled, \\\"Meta transactions are already enabled\\\");\\r\\n\\r\\n        metaTxnsEnabled = true;\\r\\n        emit MetaTxnsEnabled(_msgSender());\\r\\n    }\\r\\n\\r\\n    // Disable support for meta transactions\\r\\n    function disableMetaTxns() public onlyOperator {\\r\\n        require(metaTxnsEnabled, \\\"Meta transactions are already disabled\\\");\\r\\n\\r\\n        metaTxnsEnabled = false;\\r\\n        emit MetaTxnsDisabled(_msgSender());\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x210b9879d0f63ed47c0d157f51b2603f7d51898ce7e7e6d57758383ff0a85b85\",\"license\":\"MIT\"},\"contracts/farm/IAuroERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IAuroERC20 is IERC20 {\\r\\n    function mint(address to, uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x72a1ad47958f62c0d983744f4d2cad93149948e4d7a2a26fbf696b19ce3847f3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260006009819055600c55600d805460ff191690553480156200002557600080fd5b5060405162003a8338038062003a838339810160408190526200004891620001ba565b6200005c62000056620000f0565b6200012e565b6001805562000070436312cc0300620001f4565b600a55600280546001600160a01b038085166001600160a01b031992831617909255600683905560048054821633908117909155600580548316821790556003805490921617908190556040519116906000907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed908290a3505062000219565b6000620000fd336200017e565b1562000113575060131936013560601c6200012b565b62000128620001b660201b62002b651760201c565b90505b90565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600d5460009060ff168015620001b057506001600160a01b03821673a58b6fc9264ce507d0b0b477cee31674341cb27e145b92915050565b3390565b60008060408385031215620001cd578182fd5b82516001600160a01b0381168114620001e4578283fd5b6020939093015192949293505050565b600082198211156200021457634e487b7160e01b81526011600452602481fd5b500190565b61385a80620002296000396000f3fe608060405234801561001057600080fd5b50600436106102775760003560e01c8063578bb42d11610160578063a1f5a3eb116100d8578063d0d41fe11161008c578063e2bbb15811610071578063e2bbb158146105b6578063e663f31e146105c9578063f2fde38b146105d257610277565b8063d0d41fe114610599578063de73149d146105ac57610277565b8063af018de8116100bd578063af018de81461056b578063afbcfea11461057e578063bde4aeca1461058657610277565b8063a1f5a3eb14610555578063a8c95dc01461055e57610277565b80638705fcd41161012f5780638dbb1e3a116101145780638dbb1e3a146104cf57806393acfc48146104e257806393f1a40b146104f557610277565b80638705fcd41461049e5780638da5cb5b146104b157610277565b8063578bb42d1461046a578063630b5ba114610472578063715018a61461047a578063812c64f11461048257610277565b80633ad10ef6116101f357806348cd4cb1116101c25780635312ea8e116101a75780635312ea8e14610426578063570ca73514610439578063572b6c051461045757610277565b806348cd4cb11461040a57806351eb05a61461041357610277565b80633ad10ef6146103ae57806341275358146103ce578063441a3e70146103ee578063474fa6301461040157610277565b806317caf6f11161024a57806321dd70e61161022f57806321dd70e61461033357806329605e77146103785780632e6c998d1461038b57610277565b806317caf6f1146103175780632143e5451461032057610277565b8063081e3eda1461027c57806308383640146102975780630ba84cd2146102a15780631526fe27146102b4575b600080fd5b6102846105e5565b6040519081526020015b60405180910390f35b61029f6105ec565b005b61029f6102af36600461350c565b61079d565b6102c76102c236600461350c565b61088e565b6040805173ffffffffffffffffffffffffffffffffffffffff9098168852602088019690965294860193909352606085019190915261ffff16608084015260a083015260c082015260e00161028e565b61028460095481565b61029f61032e366004613620565b6108f8565b6002546103539073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161028e565b61029f6103863660046134d4565b610c1a565b61039e61039936600461353c565b610df1565b604051901515815260200161028e565b6004546103539073ffffffffffffffffffffffffffffffffffffffff1681565b6005546103539073ffffffffffffffffffffffffffffffffffffffff1681565b61029f6103fc3660046135c7565b610e3e565b610284600b5481565b610284600a5481565b61029f61042136600461350c565b611150565b61029f61043436600461350c565b61138e565b60035473ffffffffffffffffffffffffffffffffffffffff16610353565b61039e6104653660046134d4565b611602565b61029f611648565b61029f6117f8565b61029f611823565b61048b6103e881565b60405161ffff909116815260200161028e565b61029f6104ac3660046134d4565b6118e9565b60005473ffffffffffffffffffffffffffffffffffffffff16610353565b6102846104dd3660046135c7565b611aac565b6102846104f036600461353c565b611abf565b61053561050336600461353c565b600860209081526000928352604080842090915290825290208054600182015460028301546003909301549192909184565b60408051948552602085019390935291830152606082015260800161028e565b610284600c5481565b600d5461039e9060ff1681565b61029f61057936600461356b565b611c99565b61029f612034565b61029f6105943660046135e8565b6121d6565b61029f6105a73660046134d4565b6123d1565b6102846212750081565b61029f6105c43660046135c7565b612594565b61028460065481565b61029f6105e03660046134d4565b6129ff565b6007545b90565b60035473ffffffffffffffffffffffffffffffffffffffff163314610697576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f720000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600d5460ff16610729576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4d657461207472616e73616374696f6e732061726520616c726561647920646960448201527f7361626c65640000000000000000000000000000000000000000000000000000606482015260840161068e565b600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055610759612b69565b73ffffffffffffffffffffffffffffffffffffffff167f096be170ccc67847e55535e7d8334b2afedd95805baedc160005addb9144745060405160405180910390a2565b60035473ffffffffffffffffffffffffffffffffffffffff163314610843576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f7200000000000000000000000000000000000000000000000000000000606482015260840161068e565b61084b6117f8565b600654604080519182526020820183905233917feedc6338c9c1ad8f3cd6c90dd09dbe98dbd57e610d3e59a17996d07acb0d9511910160405180910390a2600655565b6007818154811061089e57600080fd5b6000918252602090912060079091020180546001820154600283015460038401546004850154600586015460069096015473ffffffffffffffffffffffffffffffffffffffff909516965092949193909261ffff16919087565b610900612b69565b73ffffffffffffffffffffffffffffffffffffffff1661093560005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff16146109b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161068e565b6103e861ffff84161115610a22576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f7365743a206465706f7369742066656520746f6f206869676800000000000000604482015260640161068e565b62127500821115610a8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f7365743a20696e76616c6964206861727665737420696e74657276616c000000604482015260640161068e565b8015610a9d57610a9d6117f8565b610b0784610b0160078881548110610ade577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906007020160010154600954612bad90919063ffffffff16565b90612bb9565b6009819055508360078681548110610b48577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060070201600101819055508260078681548110610b98577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906007020160040160006101000a81548161ffff021916908361ffff1602179055508160078681548110610bfe577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060070201600501819055505050505050565b60035473ffffffffffffffffffffffffffffffffffffffff163314610cc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f7200000000000000000000000000000000000000000000000000000000606482015260840161068e565b73ffffffffffffffffffffffffffffffffffffffff8116610d63576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f5472616e736665724f70657261746f723a206e6577206f70657261746f72206960448201527f7320746865207a65726f20616464726573730000000000000000000000000000606482015260840161068e565b60035460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed90600090a3600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600082815260086020908152604080832073ffffffffffffffffffffffffffffffffffffffff851684529091528120600a544310801590610e36575080600301544210155b949350505050565b60026001541415610eab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161068e565b6002600181905550600060078381548110610eef577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020808320868452600890915260408320600790920201925081610f16612b69565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508281600001541015610fc0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f57697468647261773a205573657220616d6f756e74206e6f7420656e6f756768604482015260640161068e565b828260060154101561102e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f57697468647261773a20506f6f6c20746f74616c206e6f7420656e6f75676800604482015260640161068e565b61103784611150565b61104084612bc5565b82156110c85780546110529084612bad565b815560068201546110639084612bad565b6006830155600254825473ffffffffffffffffffffffffffffffffffffffff9081169116141561109e57600c5461109a9084612bad565b600c555b6110c86110a9612b69565b835473ffffffffffffffffffffffffffffffffffffffff169085612de2565b600382015481546110e99164e8d4a51000916110e391612ebb565b90612ec7565b6001820155836110f7612b69565b73ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688560405161113e91815260200190565b60405180910390a35050600180555050565b60006007828154811061118c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600702019050806002015443116111ad575061138b565b60068101548015806111c157506001820154155b156111d357504360029091015561138b565b60006111e3836002015443611aac565b905060006112106009546110e3866001015461120a60065487612ebb90919063ffffffff16565b90612ebb565b60025460045491925073ffffffffffffffffffffffffffffffffffffffff908116916340c10f19911661124484600a612ec7565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b1580156112af57600080fd5b505af11580156112c3573d6000803e3d6000fd5b50506002546040517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810185905273ffffffffffffffffffffffffffffffffffffffff90911692506340c10f199150604401600060405180830381600087803b15801561133957600080fd5b505af115801561134d573d6000803e3d6000fd5b5050506006850154611378915061136d906110e38464e8d4a51000612ebb565b600386015490612bb9565b6003850155505043600290920191909155505b50565b600260015414156113fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161068e565b600260018190555060006007828154811061143f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020808320858452600890915260408320600790920201925081611466612b69565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000208054600684015491925090811115611526576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f456d657267656e637957697468647261773a20506f6f6c20746f74616c206e6f60448201527f7420656e6f756768000000000000000000000000000000000000000000000000606482015260840161068e565b600080835560018301819055600283018190556003830155600683015461154d9082612bad565b6006840155600254835473ffffffffffffffffffffffffffffffffffffffff9081169116141561158857600c546115849082612bad565b600c555b6115b2611593612b69565b845473ffffffffffffffffffffffffffffffffffffffff169083612de2565b836115bb612b69565b73ffffffffffffffffffffffffffffffffffffffff167fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05958360405161113e91815260200190565b600d5460009060ff168015611640575073ffffffffffffffffffffffffffffffffffffffff821673a58b6fc9264ce507d0b0b477cee31674341cb27e145b90505b919050565b60035473ffffffffffffffffffffffffffffffffffffffff1633146116ee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f7200000000000000000000000000000000000000000000000000000000606482015260840161068e565b600d5460ff1615611781576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4d657461207472616e73616374696f6e732061726520616c726561647920656e60448201527f61626c6564000000000000000000000000000000000000000000000000000000606482015260840161068e565b600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556117b4612b69565b73ffffffffffffffffffffffffffffffffffffffff167f92e4c08d47b71e8dc051232b8e475ec296489a67a4ba5cca88ff20fb6ac499e660405160405180910390a2565b60075460005b8181101561181f5761180f81611150565b6118188161378c565b90506117fe565b5050565b61182b612b69565b73ffffffffffffffffffffffffffffffffffffffff1661186060005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff16146118dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161068e565b6118e76000612ed3565b565b60055473ffffffffffffffffffffffffffffffffffffffff1661190a612b69565b73ffffffffffffffffffffffffffffffffffffffff1614611987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f736574466565416464726573733a20464f5242494444454e0000000000000000604482015260640161068e565b73ffffffffffffffffffffffffffffffffffffffff8116611a04576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f736574466565416464726573733a205a45524f00000000000000000000000000604482015260640161068e565b611a0c612b69565b6005546040805173ffffffffffffffffffffffffffffffffffffffff9283168152848316602082015292909116917f6690a53895b5691c039238b384bd857e65c42adcc727775381e02cb90a122613910160405180910390a2600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000611ab88284612bad565b9392505050565b60008060078481548110611afc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000918252602080832087845260088252604080852073ffffffffffffffffffffffffffffffffffffffff898116875293528085206007949094029091016003810154815492517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015291965093949291909116906370a082319060240160206040518083038186803b158015611b9857600080fd5b505afa158015611bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd09190613524565b9050836002015443118015611be457508015155b15611c44576000611bf9856002015443611aac565b90506000611c206009546110e3886001015461120a60065487612ebb90919063ffffffff16565b9050611c3f611c38846110e38464e8d4a51000612ebb565b8590612bb9565b935050505b6000611c748460010154611c6e64e8d4a510006110e3878960000154612ebb90919063ffffffff16565b90612bad565b9050611c8d846002015482612bb990919063ffffffff16565b98975050505050505050565b611ca1612b69565b73ffffffffffffffffffffffffffffffffffffffff16611cd660005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614611d53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161068e565b6103e861ffff84161115611dc3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f6164643a206465706f7369742066656520746f6f206869676800000000000000604482015260640161068e565b62127500821115611e30576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6164643a20696e76616c6964206861727665737420696e74657276616c000000604482015260640161068e565b8015611e3e57611e3e6117f8565b6000600a544311611e5157600a54611e53565b435b600954909150611e639087612bb9565b6009556040805160e08101825273ffffffffffffffffffffffffffffffffffffffff96871681526020810197885290810191825260006060820181815261ffff9687166080840190815260a0840196875260c08401838152600780546001810182559481905294517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6889490950293840180547fffffffffffffffffffffffff00000000000000000000000000000000000000001695909a169490941790985597517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68982015591517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a83015595517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68b82015593517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68c850180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000169190941617909255517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68d8301555090517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68e90910155565b61203c612b69565b73ffffffffffffffffffffffffffffffffffffffff1661207160005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff16146120ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161068e565b600a544310612159576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4572726f723a3a4661726d207374617274656420616c72656164790000000000604482015260640161068e565b60075460005b818110156121ce576000600782815481106121a3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060070201905043816002018190555050806121c79061378c565b905061215f565b505043600a55565b60035473ffffffffffffffffffffffffffffffffffffffff16331461227c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f7200000000000000000000000000000000000000000000000000000000606482015260840161068e565b801561228a5761228a6117f8565b612292612b69565b73ffffffffffffffffffffffffffffffffffffffff167f802633c8d26237616d81bdac01bc40fcdf36e098832601582ec19d7e431c5ef360078581548110612303577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060070201600101548460405161232d929190918252602082015260400190565b60405180910390a261237682610b0160078681548110610ade577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60098190555081600784815481106123b7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906007020160010181905550505050565b60045473ffffffffffffffffffffffffffffffffffffffff166123f2612b69565b73ffffffffffffffffffffffffffffffffffffffff161461246f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f736574446576416464726573733a20464f5242494444454e0000000000000000604482015260640161068e565b73ffffffffffffffffffffffffffffffffffffffff81166124ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f736574446576416464726573733a205a45524f00000000000000000000000000604482015260640161068e565b6124f4612b69565b6004546040805173ffffffffffffffffffffffffffffffffffffffff9283168152848316602082015292909116917fd36d63f6c513a911d7912853de740af476b0fbb569aa769e1a4f5bfa37a325c4910160405180910390a2600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60026001541415612601576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161068e565b6002600155600a54431015612698576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f4175726f4469737472696275746f723a2043616e206e6f74206465706f73697460448201527f206265666f726520737461727400000000000000000000000000000000000000606482015260840161068e565b6000600783815481106126d4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083208684526008909152604083206007909202019250816126fb612b69565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061274084611150565b61274984612bc5565b821561298f5781546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b1580156127b857600080fd5b505afa1580156127cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f09190613524565b905061281d6127fd612b69565b845473ffffffffffffffffffffffffffffffffffffffff16903087612f48565b82546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561288657600080fd5b505afa15801561289a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128be9190613524565b90506128ca8183612bad565b600485015490955061ffff16156129345760048401546000906128fa90612710906110e390899061ffff16612ebb565b60055486549192506129269173ffffffffffffffffffffffffffffffffffffffff908116911683612de2565b6129308682612bad565b9550505b82546129409086612bb9565b835560068401546129519086612bb9565b6006850155600254845473ffffffffffffffffffffffffffffffffffffffff9081169116141561298c57600c546129889086612bb9565b600c555b50505b600382015481546129aa9164e8d4a51000916110e391612ebb565b6001820155836129b8612b69565b73ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a158560405161113e91815260200190565b612a07612b69565b73ffffffffffffffffffffffffffffffffffffffff16612a3c60005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614612ab9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161068e565b73ffffffffffffffffffffffffffffffffffffffff8116612b5c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161068e565b61138b81612ed3565b3390565b6000612b7433611602565b15612ba657507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c6105e9565b50336105e9565b6000611ab88284613749565b6000611ab882846136bb565b600060078281548110612c01577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020808320858452600890915260408320600790920201925081612c28612b69565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080600301546000148015612c7a5750600a544310155b15612c95576005820154612c8f904290612bb9565b60038201555b6000612cc38260010154611c6e64e8d4a510006110e387600301548760000154612ebb90919063ffffffff16565b9050612cd184610399612b69565b15612d59576000811180612ce9575060008260020154115b15612d54576000612d07836002015483612bb990919063ffffffff16565b9050612d228360020154600b54612bad90919063ffffffff16565b600b55600060028401556005840154612d3c904290612bb9565b6003840155612d52612d4c612b69565b82612fa6565b505b612ddc565b8015612ddc576002820154612d6e9082612bb9565b6002830155600b54612d809082612bb9565b600b5583612d8c612b69565b73ffffffffffffffffffffffffffffffffffffffff167fee470483107f579a55c754fa00613c45a9a3b617a418b39cb0be97e5381ba7c183604051612dd391815260200190565b60405180910390a35b50505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052612eb69084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261326a565b505050565b6000611ab8828461370c565b6000611ab882846136d3565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052612ddc9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612e34565b600c546002546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b15801561301257600080fd5b505afa158015613026573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061304a9190613524565b111561181f57600c546002546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000926130fd92909173ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b1580156130c557600080fd5b505afa1580156130d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6e9190613524565b90508082106131b8576002546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b15801561317a57600080fd5b505af115801561318e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b291906134f0565b50612eb6565b8115612eb6576002546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b15801561323257600080fd5b505af1158015613246573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ddc91906134f0565b60006132cc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166133769092919063ffffffff16565b805190915015612eb657808060200190518101906132ea91906134f0565b612eb6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161068e565b6060610e36848460008585843b6133e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161068e565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613412919061364e565b60006040518083038185875af1925050503d806000811461344f576040519150601f19603f3d011682016040523d82523d6000602084013e613454565b606091505b509150915061346482828661346f565b979650505050505050565b6060831561347e575081611ab8565b82511561348e5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068e919061366a565b803561ffff8116811461164357600080fd5b6000602082840312156134e5578081fd5b8135611ab8816137f4565b600060208284031215613501578081fd5b8151611ab881613816565b60006020828403121561351d578081fd5b5035919050565b600060208284031215613535578081fd5b5051919050565b6000806040838503121561354e578081fd5b823591506020830135613560816137f4565b809150509250929050565b600080600080600060a08688031215613582578081fd5b853594506020860135613594816137f4565b93506135a2604087016134c2565b92506060860135915060808601356135b981613816565b809150509295509295909350565b600080604083850312156135d9578182fd5b50508035926020909101359150565b6000806000606084860312156135fc578283fd5b8335925060208401359150604084013561361581613816565b809150509250925092565b600080600080600060a08688031215613637578081fd5b85359450602086013593506135a2604087016134c2565b60008251613660818460208701613760565b9190910192915050565b6000602082528251806020840152613689816040850160208701613760565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600082198211156136ce576136ce6137c5565b500190565b600082613707577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613744576137446137c5565b500290565b60008282101561375b5761375b6137c5565b500390565b60005b8381101561377b578181015183820152602001613763565b83811115612ddc5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156137be576137be6137c5565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461138b57600080fd5b801515811461138b57600080fdfea2646970667358221220c6dd2f319194466b760c6fe40407fdacfe7a94168b60ae9c02f44cb1bceea24c64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102775760003560e01c8063578bb42d11610160578063a1f5a3eb116100d8578063d0d41fe11161008c578063e2bbb15811610071578063e2bbb158146105b6578063e663f31e146105c9578063f2fde38b146105d257610277565b8063d0d41fe114610599578063de73149d146105ac57610277565b8063af018de8116100bd578063af018de81461056b578063afbcfea11461057e578063bde4aeca1461058657610277565b8063a1f5a3eb14610555578063a8c95dc01461055e57610277565b80638705fcd41161012f5780638dbb1e3a116101145780638dbb1e3a146104cf57806393acfc48146104e257806393f1a40b146104f557610277565b80638705fcd41461049e5780638da5cb5b146104b157610277565b8063578bb42d1461046a578063630b5ba114610472578063715018a61461047a578063812c64f11461048257610277565b80633ad10ef6116101f357806348cd4cb1116101c25780635312ea8e116101a75780635312ea8e14610426578063570ca73514610439578063572b6c051461045757610277565b806348cd4cb11461040a57806351eb05a61461041357610277565b80633ad10ef6146103ae57806341275358146103ce578063441a3e70146103ee578063474fa6301461040157610277565b806317caf6f11161024a57806321dd70e61161022f57806321dd70e61461033357806329605e77146103785780632e6c998d1461038b57610277565b806317caf6f1146103175780632143e5451461032057610277565b8063081e3eda1461027c57806308383640146102975780630ba84cd2146102a15780631526fe27146102b4575b600080fd5b6102846105e5565b6040519081526020015b60405180910390f35b61029f6105ec565b005b61029f6102af36600461350c565b61079d565b6102c76102c236600461350c565b61088e565b6040805173ffffffffffffffffffffffffffffffffffffffff9098168852602088019690965294860193909352606085019190915261ffff16608084015260a083015260c082015260e00161028e565b61028460095481565b61029f61032e366004613620565b6108f8565b6002546103539073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161028e565b61029f6103863660046134d4565b610c1a565b61039e61039936600461353c565b610df1565b604051901515815260200161028e565b6004546103539073ffffffffffffffffffffffffffffffffffffffff1681565b6005546103539073ffffffffffffffffffffffffffffffffffffffff1681565b61029f6103fc3660046135c7565b610e3e565b610284600b5481565b610284600a5481565b61029f61042136600461350c565b611150565b61029f61043436600461350c565b61138e565b60035473ffffffffffffffffffffffffffffffffffffffff16610353565b61039e6104653660046134d4565b611602565b61029f611648565b61029f6117f8565b61029f611823565b61048b6103e881565b60405161ffff909116815260200161028e565b61029f6104ac3660046134d4565b6118e9565b60005473ffffffffffffffffffffffffffffffffffffffff16610353565b6102846104dd3660046135c7565b611aac565b6102846104f036600461353c565b611abf565b61053561050336600461353c565b600860209081526000928352604080842090915290825290208054600182015460028301546003909301549192909184565b60408051948552602085019390935291830152606082015260800161028e565b610284600c5481565b600d5461039e9060ff1681565b61029f61057936600461356b565b611c99565b61029f612034565b61029f6105943660046135e8565b6121d6565b61029f6105a73660046134d4565b6123d1565b6102846212750081565b61029f6105c43660046135c7565b612594565b61028460065481565b61029f6105e03660046134d4565b6129ff565b6007545b90565b60035473ffffffffffffffffffffffffffffffffffffffff163314610697576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f720000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600d5460ff16610729576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4d657461207472616e73616374696f6e732061726520616c726561647920646960448201527f7361626c65640000000000000000000000000000000000000000000000000000606482015260840161068e565b600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055610759612b69565b73ffffffffffffffffffffffffffffffffffffffff167f096be170ccc67847e55535e7d8334b2afedd95805baedc160005addb9144745060405160405180910390a2565b60035473ffffffffffffffffffffffffffffffffffffffff163314610843576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f7200000000000000000000000000000000000000000000000000000000606482015260840161068e565b61084b6117f8565b600654604080519182526020820183905233917feedc6338c9c1ad8f3cd6c90dd09dbe98dbd57e610d3e59a17996d07acb0d9511910160405180910390a2600655565b6007818154811061089e57600080fd5b6000918252602090912060079091020180546001820154600283015460038401546004850154600586015460069096015473ffffffffffffffffffffffffffffffffffffffff909516965092949193909261ffff16919087565b610900612b69565b73ffffffffffffffffffffffffffffffffffffffff1661093560005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff16146109b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161068e565b6103e861ffff84161115610a22576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f7365743a206465706f7369742066656520746f6f206869676800000000000000604482015260640161068e565b62127500821115610a8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f7365743a20696e76616c6964206861727665737420696e74657276616c000000604482015260640161068e565b8015610a9d57610a9d6117f8565b610b0784610b0160078881548110610ade577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906007020160010154600954612bad90919063ffffffff16565b90612bb9565b6009819055508360078681548110610b48577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060070201600101819055508260078681548110610b98577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906007020160040160006101000a81548161ffff021916908361ffff1602179055508160078681548110610bfe577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060070201600501819055505050505050565b60035473ffffffffffffffffffffffffffffffffffffffff163314610cc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f7200000000000000000000000000000000000000000000000000000000606482015260840161068e565b73ffffffffffffffffffffffffffffffffffffffff8116610d63576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f5472616e736665724f70657261746f723a206e6577206f70657261746f72206960448201527f7320746865207a65726f20616464726573730000000000000000000000000000606482015260840161068e565b60035460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed90600090a3600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600082815260086020908152604080832073ffffffffffffffffffffffffffffffffffffffff851684529091528120600a544310801590610e36575080600301544210155b949350505050565b60026001541415610eab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161068e565b6002600181905550600060078381548110610eef577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020808320868452600890915260408320600790920201925081610f16612b69565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508281600001541015610fc0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f57697468647261773a205573657220616d6f756e74206e6f7420656e6f756768604482015260640161068e565b828260060154101561102e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f57697468647261773a20506f6f6c20746f74616c206e6f7420656e6f75676800604482015260640161068e565b61103784611150565b61104084612bc5565b82156110c85780546110529084612bad565b815560068201546110639084612bad565b6006830155600254825473ffffffffffffffffffffffffffffffffffffffff9081169116141561109e57600c5461109a9084612bad565b600c555b6110c86110a9612b69565b835473ffffffffffffffffffffffffffffffffffffffff169085612de2565b600382015481546110e99164e8d4a51000916110e391612ebb565b90612ec7565b6001820155836110f7612b69565b73ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688560405161113e91815260200190565b60405180910390a35050600180555050565b60006007828154811061118c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600702019050806002015443116111ad575061138b565b60068101548015806111c157506001820154155b156111d357504360029091015561138b565b60006111e3836002015443611aac565b905060006112106009546110e3866001015461120a60065487612ebb90919063ffffffff16565b90612ebb565b60025460045491925073ffffffffffffffffffffffffffffffffffffffff908116916340c10f19911661124484600a612ec7565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b1580156112af57600080fd5b505af11580156112c3573d6000803e3d6000fd5b50506002546040517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810185905273ffffffffffffffffffffffffffffffffffffffff90911692506340c10f199150604401600060405180830381600087803b15801561133957600080fd5b505af115801561134d573d6000803e3d6000fd5b5050506006850154611378915061136d906110e38464e8d4a51000612ebb565b600386015490612bb9565b6003850155505043600290920191909155505b50565b600260015414156113fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161068e565b600260018190555060006007828154811061143f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020808320858452600890915260408320600790920201925081611466612b69565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000208054600684015491925090811115611526576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f456d657267656e637957697468647261773a20506f6f6c20746f74616c206e6f60448201527f7420656e6f756768000000000000000000000000000000000000000000000000606482015260840161068e565b600080835560018301819055600283018190556003830155600683015461154d9082612bad565b6006840155600254835473ffffffffffffffffffffffffffffffffffffffff9081169116141561158857600c546115849082612bad565b600c555b6115b2611593612b69565b845473ffffffffffffffffffffffffffffffffffffffff169083612de2565b836115bb612b69565b73ffffffffffffffffffffffffffffffffffffffff167fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05958360405161113e91815260200190565b600d5460009060ff168015611640575073ffffffffffffffffffffffffffffffffffffffff821673a58b6fc9264ce507d0b0b477cee31674341cb27e145b90505b919050565b60035473ffffffffffffffffffffffffffffffffffffffff1633146116ee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f7200000000000000000000000000000000000000000000000000000000606482015260840161068e565b600d5460ff1615611781576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4d657461207472616e73616374696f6e732061726520616c726561647920656e60448201527f61626c6564000000000000000000000000000000000000000000000000000000606482015260840161068e565b600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556117b4612b69565b73ffffffffffffffffffffffffffffffffffffffff167f92e4c08d47b71e8dc051232b8e475ec296489a67a4ba5cca88ff20fb6ac499e660405160405180910390a2565b60075460005b8181101561181f5761180f81611150565b6118188161378c565b90506117fe565b5050565b61182b612b69565b73ffffffffffffffffffffffffffffffffffffffff1661186060005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff16146118dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161068e565b6118e76000612ed3565b565b60055473ffffffffffffffffffffffffffffffffffffffff1661190a612b69565b73ffffffffffffffffffffffffffffffffffffffff1614611987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f736574466565416464726573733a20464f5242494444454e0000000000000000604482015260640161068e565b73ffffffffffffffffffffffffffffffffffffffff8116611a04576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f736574466565416464726573733a205a45524f00000000000000000000000000604482015260640161068e565b611a0c612b69565b6005546040805173ffffffffffffffffffffffffffffffffffffffff9283168152848316602082015292909116917f6690a53895b5691c039238b384bd857e65c42adcc727775381e02cb90a122613910160405180910390a2600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000611ab88284612bad565b9392505050565b60008060078481548110611afc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000918252602080832087845260088252604080852073ffffffffffffffffffffffffffffffffffffffff898116875293528085206007949094029091016003810154815492517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015291965093949291909116906370a082319060240160206040518083038186803b158015611b9857600080fd5b505afa158015611bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd09190613524565b9050836002015443118015611be457508015155b15611c44576000611bf9856002015443611aac565b90506000611c206009546110e3886001015461120a60065487612ebb90919063ffffffff16565b9050611c3f611c38846110e38464e8d4a51000612ebb565b8590612bb9565b935050505b6000611c748460010154611c6e64e8d4a510006110e3878960000154612ebb90919063ffffffff16565b90612bad565b9050611c8d846002015482612bb990919063ffffffff16565b98975050505050505050565b611ca1612b69565b73ffffffffffffffffffffffffffffffffffffffff16611cd660005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614611d53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161068e565b6103e861ffff84161115611dc3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f6164643a206465706f7369742066656520746f6f206869676800000000000000604482015260640161068e565b62127500821115611e30576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6164643a20696e76616c6964206861727665737420696e74657276616c000000604482015260640161068e565b8015611e3e57611e3e6117f8565b6000600a544311611e5157600a54611e53565b435b600954909150611e639087612bb9565b6009556040805160e08101825273ffffffffffffffffffffffffffffffffffffffff96871681526020810197885290810191825260006060820181815261ffff9687166080840190815260a0840196875260c08401838152600780546001810182559481905294517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6889490950293840180547fffffffffffffffffffffffff00000000000000000000000000000000000000001695909a169490941790985597517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68982015591517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a83015595517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68b82015593517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68c850180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000169190941617909255517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68d8301555090517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68e90910155565b61203c612b69565b73ffffffffffffffffffffffffffffffffffffffff1661207160005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff16146120ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161068e565b600a544310612159576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4572726f723a3a4661726d207374617274656420616c72656164790000000000604482015260640161068e565b60075460005b818110156121ce576000600782815481106121a3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060070201905043816002018190555050806121c79061378c565b905061215f565b505043600a55565b60035473ffffffffffffffffffffffffffffffffffffffff16331461227c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f7200000000000000000000000000000000000000000000000000000000606482015260840161068e565b801561228a5761228a6117f8565b612292612b69565b73ffffffffffffffffffffffffffffffffffffffff167f802633c8d26237616d81bdac01bc40fcdf36e098832601582ec19d7e431c5ef360078581548110612303577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060070201600101548460405161232d929190918252602082015260400190565b60405180910390a261237682610b0160078681548110610ade577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60098190555081600784815481106123b7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906007020160010181905550505050565b60045473ffffffffffffffffffffffffffffffffffffffff166123f2612b69565b73ffffffffffffffffffffffffffffffffffffffff161461246f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f736574446576416464726573733a20464f5242494444454e0000000000000000604482015260640161068e565b73ffffffffffffffffffffffffffffffffffffffff81166124ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f736574446576416464726573733a205a45524f00000000000000000000000000604482015260640161068e565b6124f4612b69565b6004546040805173ffffffffffffffffffffffffffffffffffffffff9283168152848316602082015292909116917fd36d63f6c513a911d7912853de740af476b0fbb569aa769e1a4f5bfa37a325c4910160405180910390a2600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60026001541415612601576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161068e565b6002600155600a54431015612698576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f4175726f4469737472696275746f723a2043616e206e6f74206465706f73697460448201527f206265666f726520737461727400000000000000000000000000000000000000606482015260840161068e565b6000600783815481106126d4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083208684526008909152604083206007909202019250816126fb612b69565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061274084611150565b61274984612bc5565b821561298f5781546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b1580156127b857600080fd5b505afa1580156127cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f09190613524565b905061281d6127fd612b69565b845473ffffffffffffffffffffffffffffffffffffffff16903087612f48565b82546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561288657600080fd5b505afa15801561289a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128be9190613524565b90506128ca8183612bad565b600485015490955061ffff16156129345760048401546000906128fa90612710906110e390899061ffff16612ebb565b60055486549192506129269173ffffffffffffffffffffffffffffffffffffffff908116911683612de2565b6129308682612bad565b9550505b82546129409086612bb9565b835560068401546129519086612bb9565b6006850155600254845473ffffffffffffffffffffffffffffffffffffffff9081169116141561298c57600c546129889086612bb9565b600c555b50505b600382015481546129aa9164e8d4a51000916110e391612ebb565b6001820155836129b8612b69565b73ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a158560405161113e91815260200190565b612a07612b69565b73ffffffffffffffffffffffffffffffffffffffff16612a3c60005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614612ab9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161068e565b73ffffffffffffffffffffffffffffffffffffffff8116612b5c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161068e565b61138b81612ed3565b3390565b6000612b7433611602565b15612ba657507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c6105e9565b50336105e9565b6000611ab88284613749565b6000611ab882846136bb565b600060078281548110612c01577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020808320858452600890915260408320600790920201925081612c28612b69565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080600301546000148015612c7a5750600a544310155b15612c95576005820154612c8f904290612bb9565b60038201555b6000612cc38260010154611c6e64e8d4a510006110e387600301548760000154612ebb90919063ffffffff16565b9050612cd184610399612b69565b15612d59576000811180612ce9575060008260020154115b15612d54576000612d07836002015483612bb990919063ffffffff16565b9050612d228360020154600b54612bad90919063ffffffff16565b600b55600060028401556005840154612d3c904290612bb9565b6003840155612d52612d4c612b69565b82612fa6565b505b612ddc565b8015612ddc576002820154612d6e9082612bb9565b6002830155600b54612d809082612bb9565b600b5583612d8c612b69565b73ffffffffffffffffffffffffffffffffffffffff167fee470483107f579a55c754fa00613c45a9a3b617a418b39cb0be97e5381ba7c183604051612dd391815260200190565b60405180910390a35b50505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052612eb69084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261326a565b505050565b6000611ab8828461370c565b6000611ab882846136d3565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052612ddc9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612e34565b600c546002546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b15801561301257600080fd5b505afa158015613026573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061304a9190613524565b111561181f57600c546002546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000926130fd92909173ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b1580156130c557600080fd5b505afa1580156130d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6e9190613524565b90508082106131b8576002546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b15801561317a57600080fd5b505af115801561318e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b291906134f0565b50612eb6565b8115612eb6576002546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b15801561323257600080fd5b505af1158015613246573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ddc91906134f0565b60006132cc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166133769092919063ffffffff16565b805190915015612eb657808060200190518101906132ea91906134f0565b612eb6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161068e565b6060610e36848460008585843b6133e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161068e565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613412919061364e565b60006040518083038185875af1925050503d806000811461344f576040519150601f19603f3d011682016040523d82523d6000602084013e613454565b606091505b509150915061346482828661346f565b979650505050505050565b6060831561347e575081611ab8565b82511561348e5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068e919061366a565b803561ffff8116811461164357600080fd5b6000602082840312156134e5578081fd5b8135611ab8816137f4565b600060208284031215613501578081fd5b8151611ab881613816565b60006020828403121561351d578081fd5b5035919050565b600060208284031215613535578081fd5b5051919050565b6000806040838503121561354e578081fd5b823591506020830135613560816137f4565b809150509250929050565b600080600080600060a08688031215613582578081fd5b853594506020860135613594816137f4565b93506135a2604087016134c2565b92506060860135915060808601356135b981613816565b809150509295509295909350565b600080604083850312156135d9578182fd5b50508035926020909101359150565b6000806000606084860312156135fc578283fd5b8335925060208401359150604084013561361581613816565b809150509250925092565b600080600080600060a08688031215613637578081fd5b85359450602086013593506135a2604087016134c2565b60008251613660818460208701613760565b9190910192915050565b6000602082528251806020840152613689816040850160208701613760565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600082198211156136ce576136ce6137c5565b500190565b600082613707577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613744576137446137c5565b500290565b60008282101561375b5761375b6137c5565b500390565b60005b8381101561377b578181015183820152602001613763565b83811115612ddc5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156137be576137be6137c5565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461138b57600080fd5b801515811461138b57600080fdfea2646970667358221220c6dd2f319194466b760c6fe40407fdacfe7a94168b60ae9c02f44cb1bceea24c64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 375,
        "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 650,
        "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3412,
        "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
        "label": "auro",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IAuroERC20)4996"
      },
      {
        "astId": 3414,
        "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
        "label": "_operator",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3416,
        "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
        "label": "devAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 3418,
        "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
        "label": "feeAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3420,
        "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
        "label": "auroPerBlock",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3430,
        "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
        "label": "poolInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(PoolInfo)3409_storage)dyn_storage"
      },
      {
        "astId": 3437,
        "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
        "label": "userInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3393_storage))"
      },
      {
        "astId": 3440,
        "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3442,
        "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
        "label": "startBlock",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3444,
        "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
        "label": "totalLockedUpRewards",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3447,
        "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
        "label": "totalAuroInPools",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3450,
        "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
        "label": "metaTxnsEnabled",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)3409_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)3409_storage",
        "encoding": "dynamic_array",
        "label": "struct AuroDistributor.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAuroERC20)4996": {
        "encoding": "inplace",
        "label": "contract IAuroERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1303": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)3393_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AuroDistributor.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)3393_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3393_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct AuroDistributor.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)3393_storage)"
      },
      "t_struct(PoolInfo)3409_storage": {
        "encoding": "inplace",
        "label": "struct AuroDistributor.PoolInfo",
        "members": [
          {
            "astId": 3396,
            "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1303"
          },
          {
            "astId": 3398,
            "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3400,
            "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3402,
            "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
            "label": "accAuroPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3404,
            "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
            "label": "depositFeeBP",
            "offset": 0,
            "slot": "4",
            "type": "t_uint16"
          },
          {
            "astId": 3406,
            "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
            "label": "harvestInterval",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3408,
            "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
            "label": "totalLp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(UserInfo)3393_storage": {
        "encoding": "inplace",
        "label": "struct AuroDistributor.UserInfo",
        "members": [
          {
            "astId": 3386,
            "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3388,
            "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3390,
            "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
            "label": "rewardLockedUp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3392,
            "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
            "label": "nextHarvestUntil",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}