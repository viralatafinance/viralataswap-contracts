{
  "address": "0xb6f954a6d4F3c94F06f79A49e4D4Ec5ca407abaE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "getAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityETHSupportingFeeOnTransferTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityETHWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapETHForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokensSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForETHSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokensSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf471cc8f0126c8ff8c1cb4bbd8390e45a4be2c0303794fb8fcba89de92e445ee",
  "receipt": {
    "to": null,
    "from": "0xA384Ad88178e3f42a31d25f43cD1B41EEc006b9F",
    "contractAddress": "0xb6f954a6d4F3c94F06f79A49e4D4Ec5ca407abaE",
    "transactionIndex": 78,
    "gasUsed": "5214406",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x6fe8bfd55715aa4acdb4734d3de729dd076827149c17979fdc9585646ff6811f",
    "transactionHash": "0xf471cc8f0126c8ff8c1cb4bbd8390e45a4be2c0303794fb8fcba89de92e445ee",
    "logs": [],
    "blockNumber": 10005358,
    "cumulativeGasUsed": "17127713",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAc4DFFd3392b38a4f05EE00e5805225bC451eA01",
    "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c"
  ],
  "solcInputHash": "423d2554a722d88ac07abff4c2bed8f3",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETHSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETHSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/uniswapv2/ViralataRouter02.sol\":\"ViralataRouter02\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/uniswapv2/ViralataRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport './libraries/ViralataLibrary.sol';\\r\\nimport './libraries/SafeMath.sol';\\r\\nimport './libraries/TransferHelper.sol';\\r\\nimport './interfaces/IViralataRouter02.sol';\\r\\nimport './interfaces/IViralataFactory.sol';\\r\\nimport './interfaces/IERC20.sol';\\r\\nimport './interfaces/IWETH.sol';\\r\\n\\r\\ncontract ViralataRouter02 is IViralataRouter02 {\\r\\n    using SafeMathViralata for uint;\\r\\n\\r\\n    address public immutable override factory;\\r\\n    address public immutable override WETH;\\r\\n\\r\\n    modifier ensure(uint deadline) {\\r\\n        require(deadline >= block.timestamp, 'ViralataRouter: EXPIRED');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _factory, address _WETH) public {\\r\\n        factory = _factory;\\r\\n        WETH = _WETH;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\\r\\n    }\\r\\n\\r\\n    // **** ADD LIQUIDITY ****\\r\\n    function _addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin\\r\\n    ) internal virtual returns (uint amountA, uint amountB) {\\r\\n        // create the pair if it doesn't exist yet\\r\\n        if (IViralataFactory(factory).getPair(tokenA, tokenB) == address(0)) {\\r\\n            IViralataFactory(factory).createPair(tokenA, tokenB);\\r\\n        }\\r\\n        (uint reserveA, uint reserveB) = ViralataLibrary.getReserves(factory, tokenA, tokenB);\\r\\n        if (reserveA == 0 && reserveB == 0) {\\r\\n            (amountA, amountB) = (amountADesired, amountBDesired);\\r\\n        } else {\\r\\n            uint amountBOptimal = ViralataLibrary.quote(amountADesired, reserveA, reserveB);\\r\\n            if (amountBOptimal <= amountBDesired) {\\r\\n                require(amountBOptimal >= amountBMin, 'ViralataRouter: INSUFFICIENT_B_AMOUNT');\\r\\n                (amountA, amountB) = (amountADesired, amountBOptimal);\\r\\n            } else {\\r\\n                uint amountAOptimal = ViralataLibrary.quote(amountBDesired, reserveB, reserveA);\\r\\n                assert(amountAOptimal <= amountADesired);\\r\\n                require(amountAOptimal >= amountAMin, 'ViralataRouter: INSUFFICIENT_A_AMOUNT');\\r\\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external virtual override ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {\\r\\n        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\\r\\n        address pair = ViralataLibrary.pairFor(factory, tokenA, tokenB);\\r\\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\\r\\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\\r\\n        liquidity = IViralataPair(pair).mint(to);\\r\\n    }\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external virtual override payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {\\r\\n        (amountToken, amountETH) = _addLiquidity(\\r\\n            token,\\r\\n            WETH,\\r\\n            amountTokenDesired,\\r\\n            msg.value,\\r\\n            amountTokenMin,\\r\\n            amountETHMin\\r\\n        );\\r\\n        address pair = ViralataLibrary.pairFor(factory, token, WETH);\\r\\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\\r\\n        IWETH(WETH).deposit{value: amountETH}();\\r\\n        assert(IWETH(WETH).transfer(pair, amountETH));\\r\\n        liquidity = IViralataPair(pair).mint(to);\\r\\n        // refund dust eth, if any\\r\\n        if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\\r\\n    }\\r\\n\\r\\n    // **** REMOVE LIQUIDITY ****\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) public virtual override ensure(deadline) returns (uint amountA, uint amountB) {\\r\\n        address pair = ViralataLibrary.pairFor(factory, tokenA, tokenB);\\r\\n        IViralataPair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\\r\\n        (uint amount0, uint amount1) = IViralataPair(pair).burn(to);\\r\\n        (address token0,) = ViralataLibrary.sortTokens(tokenA, tokenB);\\r\\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\\r\\n        require(amountA >= amountAMin, 'ViralataRouter: INSUFFICIENT_A_AMOUNT');\\r\\n        require(amountB >= amountBMin, 'ViralataRouter: INSUFFICIENT_B_AMOUNT');\\r\\n    }\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) public virtual override ensure(deadline) returns (uint amountToken, uint amountETH) {\\r\\n        (amountToken, amountETH) = removeLiquidity(\\r\\n            token,\\r\\n            WETH,\\r\\n            liquidity,\\r\\n            amountTokenMin,\\r\\n            amountETHMin,\\r\\n            address(this),\\r\\n            deadline\\r\\n        );\\r\\n        TransferHelper.safeTransfer(token, to, amountToken);\\r\\n        IWETH(WETH).withdraw(amountETH);\\r\\n        TransferHelper.safeTransferETH(to, amountETH);\\r\\n    }\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external virtual override returns (uint amountA, uint amountB) {\\r\\n        address pair = ViralataLibrary.pairFor(factory, tokenA, tokenB);\\r\\n        uint value = approveMax ? uint(-1) : liquidity;\\r\\n        IViralataPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\r\\n        (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\\r\\n    }\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external virtual override returns (uint amountToken, uint amountETH) {\\r\\n        address pair = ViralataLibrary.pairFor(factory, token, WETH);\\r\\n        uint value = approveMax ? uint(-1) : liquidity;\\r\\n        IViralataPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\r\\n        (amountToken, amountETH) = removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);\\r\\n    }\\r\\n\\r\\n    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) public virtual override ensure(deadline) returns (uint amountETH) {\\r\\n        (, amountETH) = removeLiquidity(\\r\\n            token,\\r\\n            WETH,\\r\\n            liquidity,\\r\\n            amountTokenMin,\\r\\n            amountETHMin,\\r\\n            address(this),\\r\\n            deadline\\r\\n        );\\r\\n        TransferHelper.safeTransfer(token, to, IERC20Viralata(token).balanceOf(address(this)));\\r\\n        IWETH(WETH).withdraw(amountETH);\\r\\n        TransferHelper.safeTransferETH(to, amountETH);\\r\\n    }\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external virtual override returns (uint amountETH) {\\r\\n        address pair = ViralataLibrary.pairFor(factory, token, WETH);\\r\\n        uint value = approveMax ? uint(-1) : liquidity;\\r\\n        IViralataPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\r\\n        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n            token, liquidity, amountTokenMin, amountETHMin, to, deadline\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // **** SWAP ****\\r\\n    // requires the initial amount to have already been sent to the first pair\\r\\n    function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual {\\r\\n        for (uint i; i < path.length - 1; i++) {\\r\\n            (address input, address output) = (path[i], path[i + 1]);\\r\\n            (address token0,) = ViralataLibrary.sortTokens(input, output);\\r\\n            uint amountOut = amounts[i + 1];\\r\\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\\r\\n            address to = i < path.length - 2 ? ViralataLibrary.pairFor(factory, output, path[i + 2]) : _to;\\r\\n            IViralataPair(ViralataLibrary.pairFor(factory, input, output)).swap(\\r\\n                amount0Out, amount1Out, to, new bytes(0)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\\r\\n        address auro = IViralataFactory(factory).auro();\\r\\n        uint fee = 25;\\r\\n        if (path[0] == auro || path[1] == auro) fee = 50; // increase fee for AURO\\r\\n\\r\\n        amounts = ViralataLibrary.getAmountsOut(factory, amountIn, path, fee);\\r\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'ViralataRouter: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n        TransferHelper.safeTransferFrom(\\r\\n            path[0], msg.sender, ViralataLibrary.pairFor(factory, path[0], path[1]), amounts[0]\\r\\n        );\\r\\n        _swap(amounts, path, to);\\r\\n    }\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\\r\\n        address auro = IViralataFactory(factory).auro();\\r\\n        uint fee = 25;\\r\\n        if (path[0] == auro || path[1] == auro) fee = 50; // increase fee for AURO\\r\\n\\r\\n        amounts = ViralataLibrary.getAmountsIn(factory, amountOut, path, fee);\\r\\n        require(amounts[0] <= amountInMax, 'ViralataRouter: EXCESSIVE_INPUT_AMOUNT');\\r\\n        TransferHelper.safeTransferFrom(\\r\\n            path[0], msg.sender, ViralataLibrary.pairFor(factory, path[0], path[1]), amounts[0]\\r\\n        );\\r\\n        _swap(amounts, path, to);\\r\\n    }\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        payable\\r\\n        ensure(deadline)\\r\\n        returns (uint[] memory amounts)\\r\\n    {\\r\\n        require(path[0] == WETH, 'ViralataRouter: INVALID_PATH');\\r\\n        address auro = IViralataFactory(factory).auro();\\r\\n        uint fee = 25;\\r\\n        if (path[0] == auro || path[1] == auro) fee = 50; // increase fee for AURO\\r\\n\\r\\n        amounts = ViralataLibrary.getAmountsOut(factory, msg.value, path, fee);\\r\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'ViralataRouter: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n        IWETH(WETH).deposit{value: amounts[0]}();\\r\\n        assert(IWETH(WETH).transfer(ViralataLibrary.pairFor(factory, path[0], path[1]), amounts[0]));\\r\\n        _swap(amounts, path, to);\\r\\n    }\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        ensure(deadline)\\r\\n        returns (uint[] memory amounts)\\r\\n    {\\r\\n        require(path[path.length - 1] == WETH, 'ViralataRouter: INVALID_PATH');\\r\\n        address auro = IViralataFactory(factory).auro();\\r\\n        uint fee = 25;\\r\\n        if (path[0] == auro || path[1] == auro) fee = 50; // increase fee for AURO\\r\\n\\r\\n        amounts = ViralataLibrary.getAmountsIn(factory, amountOut, path, fee);\\r\\n        require(amounts[0] <= amountInMax, 'ViralataRouter: EXCESSIVE_INPUT_AMOUNT');\\r\\n        TransferHelper.safeTransferFrom(\\r\\n            path[0], msg.sender, ViralataLibrary.pairFor(factory, path[0], path[1]), amounts[0]\\r\\n        );\\r\\n        _swap(amounts, path, address(this));\\r\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\r\\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\\r\\n    }\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        ensure(deadline)\\r\\n        returns (uint[] memory amounts)\\r\\n    {\\r\\n        require(path[path.length - 1] == WETH, 'ViralataRouter: INVALID_PATH');\\r\\n        address auro = IViralataFactory(factory).auro();\\r\\n        uint fee = 25;\\r\\n        if (path[0] == auro || path[1] == auro) fee = 50; // increase fee for AURO\\r\\n\\r\\n        amounts = ViralataLibrary.getAmountsOut(factory, amountIn, path, fee);\\r\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'ViralataRouter: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n        TransferHelper.safeTransferFrom(\\r\\n            path[0], msg.sender, ViralataLibrary.pairFor(factory, path[0], path[1]), amounts[0]\\r\\n        );\\r\\n        _swap(amounts, path, address(this));\\r\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\r\\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\\r\\n    }\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        payable\\r\\n        ensure(deadline)\\r\\n        returns (uint[] memory amounts)\\r\\n    {\\r\\n        require(path[0] == WETH, 'ViralataRouter: INVALID_PATH');\\r\\n        address auro = IViralataFactory(factory).auro();\\r\\n        uint fee = 25;\\r\\n        if (path[0] == auro || path[1] == auro) fee = 50; // increase fee for AURO\\r\\n\\r\\n        amounts = ViralataLibrary.getAmountsIn(factory, amountOut, path, fee);\\r\\n        require(amounts[0] <= msg.value, 'ViralataRouter: EXCESSIVE_INPUT_AMOUNT');\\r\\n        IWETH(WETH).deposit{value: amounts[0]}();\\r\\n        assert(IWETH(WETH).transfer(ViralataLibrary.pairFor(factory, path[0], path[1]), amounts[0]));\\r\\n        _swap(amounts, path, to);\\r\\n        // refund dust eth, if any\\r\\n        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\\r\\n    }\\r\\n\\r\\n    // **** SWAP (supporting fee-on-transfer tokens) ****\\r\\n    // requires the initial amount to have already been sent to the first pair\\r\\n    function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {\\r\\n        for (uint i; i < path.length - 1; i++) {\\r\\n            (address input, address output) = (path[i], path[i + 1]);\\r\\n            (address token0,) = ViralataLibrary.sortTokens(input, output);\\r\\n            IViralataPair pair = IViralataPair(ViralataLibrary.pairFor(factory, input, output));\\r\\n            uint amountInput;\\r\\n            uint amountOutput;\\r\\n\\r\\n\\r\\n            { // scope to avoid stack too deep errors\\r\\n                (uint reserve0, uint reserve1,) = pair.getReserves();\\r\\n                (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\r\\n\\r\\n                address auro = IViralataFactory(factory).auro();\\r\\n                uint fee = 25;\\r\\n                if (input == auro || output == auro) fee = 50; // increase fee for AURO\\r\\n\\r\\n                amountInput = IERC20Viralata(input).balanceOf(address(pair)).sub(reserveInput);\\r\\n                amountOutput = ViralataLibrary.getAmountOut(amountInput, reserveInput, reserveOutput, fee);\\r\\n            }\\r\\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\\r\\n            address to = i < path.length - 2 ? ViralataLibrary.pairFor(factory, output, path[i + 2]) : _to;\\r\\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\\r\\n        }\\r\\n    }\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external virtual override ensure(deadline) {\\r\\n        TransferHelper.safeTransferFrom(\\r\\n            path[0], msg.sender, ViralataLibrary.pairFor(factory, path[0], path[1]), amountIn\\r\\n        );\\r\\n        uint balanceBefore = IERC20Viralata(path[path.length - 1]).balanceOf(to);\\r\\n        _swapSupportingFeeOnTransferTokens(path, to);\\r\\n        require(\\r\\n            IERC20Viralata(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\\r\\n            'ViralataRouter: INSUFFICIENT_OUTPUT_AMOUNT'\\r\\n        );\\r\\n    }\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    )\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        payable\\r\\n        ensure(deadline)\\r\\n    {\\r\\n        require(path[0] == WETH, 'ViralataRouter: INVALID_PATH');\\r\\n        uint amountIn = msg.value;\\r\\n        IWETH(WETH).deposit{value: amountIn}();\\r\\n        assert(IWETH(WETH).transfer(ViralataLibrary.pairFor(factory, path[0], path[1]), amountIn));\\r\\n        uint balanceBefore = IERC20Viralata(path[path.length - 1]).balanceOf(to);\\r\\n        _swapSupportingFeeOnTransferTokens(path, to);\\r\\n        require(\\r\\n            IERC20Viralata(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\\r\\n            'ViralataRouter: INSUFFICIENT_OUTPUT_AMOUNT'\\r\\n        );\\r\\n    }\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    )\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        ensure(deadline)\\r\\n    {\\r\\n        require(path[path.length - 1] == WETH, 'ViralataRouter: INVALID_PATH');\\r\\n        TransferHelper.safeTransferFrom(\\r\\n            path[0], msg.sender, ViralataLibrary.pairFor(factory, path[0], path[1]), amountIn\\r\\n        );\\r\\n        _swapSupportingFeeOnTransferTokens(path, address(this));\\r\\n        uint amountOut = IERC20Viralata(WETH).balanceOf(address(this));\\r\\n        require(amountOut >= amountOutMin, 'ViralataRouter: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n        IWETH(WETH).withdraw(amountOut);\\r\\n        TransferHelper.safeTransferETH(to, amountOut);\\r\\n    }\\r\\n\\r\\n    // **** LIBRARY FUNCTIONS ****\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) public pure virtual override returns (uint amountB) {\\r\\n        return ViralataLibrary.quote(amountA, reserveA, reserveB);\\r\\n    }\\r\\n\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint fee)\\r\\n        public\\r\\n        pure\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint amountOut)\\r\\n    {\\r\\n        return ViralataLibrary.getAmountOut(amountIn, reserveIn, reserveOut, fee);\\r\\n    }\\r\\n\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint fee)\\r\\n        public\\r\\n        pure\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint amountIn)\\r\\n    {\\r\\n        return ViralataLibrary.getAmountIn(amountOut, reserveIn, reserveOut, fee);\\r\\n    }\\r\\n\\r\\n    function getAmountsOut(uint amountIn, address[] memory path, uint fee)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint[] memory amounts)\\r\\n    {\\r\\n        return ViralataLibrary.getAmountsOut(factory, amountIn, path, fee);\\r\\n    }\\r\\n\\r\\n    function getAmountsIn(uint amountOut, address[] memory path, uint fee)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint[] memory amounts)\\r\\n    {\\r\\n        return ViralataLibrary.getAmountsIn(factory, amountOut, path, fee);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x94095bfae1dc512bdb411112759b409a68b5ba44e934516642c79ec91dde70c8\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IERC20Viralata {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x31e7d6c937026fc9bdba36d6c60dbace9f8445df76ec239fdee353f143037b09\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/interfaces/IViralataFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IViralataFactory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n    function migrator() external view returns (address);\\r\\n    function auro() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n    function setMigrator(address) external;\\r\\n    function setAuroAddress(address) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x8d68422f5ebfcc654a411db7de9441a5337eaddb0e06e64e03c2acbe2170a7b3\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/interfaces/IViralataPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IViralataPair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\",\"keccak256\":\"0xe344ed6d7beade9d7995f943f38376ab41774dfbc594ad4eda257e8416081f6a\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/interfaces/IViralataRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\ninterface IViralataRouter01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint fee) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint fee) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path, uint fee) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path, uint fee) external view returns (uint[] memory amounts);\\r\\n}\",\"keccak256\":\"0x61dd0282c6469dfbafbb46e6862423904bfe6ae81ca0116b00d5ca93c96028b4\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/interfaces/IViralataRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\nimport './IViralataRouter01.sol';\\r\\n\\r\\ninterface IViralataRouter02 is IViralataRouter01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\",\"keccak256\":\"0x1da12f154b76ca89d709060f045d647f9c6df8da68a029646bd61ec1e8d4c0bb\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function withdraw(uint) external;\\r\\n}\",\"keccak256\":\"0x31730667aaae7277c6d3f70c59df98f926da7172ea04b7b30bc70c7e8dd19fa6\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\r\\n\\r\\nlibrary SafeMathViralata {\\r\\n    function add(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\r\\n    }\\r\\n\\r\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\r\\n    }\\r\\n\\r\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfd0edb63940f3f79704985376b53cff958ddf21f5f16153e0b8101d2cc115662\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransfer(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint value) internal {\\r\\n        (bool success,) = to.call{value:value}(new bytes(0));\\r\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x59710564a0f714ae5f9f11e33bd62faa7504b1329c46fc262b1b710ec877fce2\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/libraries/ViralataLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport '../interfaces/IViralataPair.sol';\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\nlibrary ViralataLibrary {\\r\\n    using SafeMathViralata for uint;\\r\\n\\r\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\r\\n        require(tokenA != tokenB, 'ViralataLibrary: IDENTICAL_ADDRESSES');\\r\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), 'ViralataLibrary: ZERO_ADDRESS');\\r\\n    }\\r\\n\\r\\n    // calculates the CREATE2 address for a pair without making any external calls\\r\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\r\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\r\\n        pair = address(uint(keccak256(abi.encodePacked(\\r\\n                hex'ff',\\r\\n                factory,\\r\\n                keccak256(abi.encodePacked(token0, token1)),\\r\\n                hex'1f8a283ca49e2be3a4c310bfa79ed27628edc584d5f528a02daafe1762f41fa2' // init code hash\\r\\n            ))));\\r\\n    }\\r\\n\\r\\n    // fetches and sorts the reserves for a pair\\r\\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\\r\\n        (address token0,) = sortTokens(tokenA, tokenB);\\r\\n        (uint reserve0, uint reserve1,) = IViralataPair(pairFor(factory, tokenA, tokenB)).getReserves();\\r\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\r\\n    }\\r\\n\\r\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\\r\\n        require(amountA > 0, 'ViralataLibrary: INSUFFICIENT_AMOUNT');\\r\\n        require(reserveA > 0 && reserveB > 0, 'ViralataLibrary: INSUFFICIENT_LIQUIDITY');\\r\\n        amountB = amountA.mul(reserveB) / reserveA;\\r\\n    }\\r\\n\\r\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint fee) internal pure returns (uint amountOut) {\\r\\n        require(amountIn > 0, 'ViralataLibrary: INSUFFICIENT_INPUT_AMOUNT');\\r\\n        require(reserveIn > 0 && reserveOut > 0, 'ViralataLibrary: INSUFFICIENT_LIQUIDITY');\\r\\n        uint feeMul = uint(10000).sub(fee);\\r\\n        uint amountInWithFee = amountIn.mul(feeMul);\\r\\n        uint numerator = amountInWithFee.mul(reserveOut);\\r\\n        uint denominator = reserveIn.mul(10000).add(amountInWithFee);\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n\\r\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint fee) internal pure returns (uint amountIn) {\\r\\n        require(amountOut > 0, 'ViralataLibrary: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n        require(reserveIn > 0 && reserveOut > 0, 'ViralataLibrary: INSUFFICIENT_LIQUIDITY');\\r\\n        uint feeMul = uint(10000).sub(fee);\\r\\n        uint numerator = reserveIn.mul(amountOut).mul(10000);\\r\\n        uint denominator = reserveOut.sub(amountOut).mul(feeMul);\\r\\n        amountIn = (numerator / denominator).add(1);\\r\\n    }\\r\\n\\r\\n    // performs chained getAmountOut calculations on any number of pairs\\r\\n    function getAmountsOut(address factory, uint amountIn, address[] memory path, uint fee) internal view returns (uint[] memory amounts) {\\r\\n        require(path.length >= 2, 'ViralataLibrary: INVALID_PATH');\\r\\n        amounts = new uint[](path.length);\\r\\n        amounts[0] = amountIn;\\r\\n        for (uint i; i < path.length - 1; i++) {\\r\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\\r\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, fee);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // performs chained getAmountIn calculations on any number of pairs\\r\\n    function getAmountsIn(address factory, uint amountOut, address[] memory path, uint fee) internal view returns (uint[] memory amounts) {\\r\\n        require(path.length >= 2, 'ViralataLibrary: INVALID_PATH');\\r\\n        amounts = new uint[](path.length);\\r\\n        amounts[amounts.length - 1] = amountOut;\\r\\n        for (uint i = path.length - 1; i > 0; i--) {\\r\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\\r\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut, fee);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x30749eb3298e1f9fb58b1b7adf5b505f1a34f5501ebc163b9063cd171fa1b067\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162005fae38038062005fae833981810160405260408110156200003757600080fd5b5080516020909101516001600160601b0319606092831b8116608052911b1660a05260805160601c60a05160601c615e04620001aa600039806101ac5280610e6d5280610ea85280610fd052806113eb528061199f5280611d00528061221652806123555280612463528061256a5280612875528061290a5280612d1d5280612dc45280612e925280612fa2528061308a528061310b528061372b5280613a795280613acf5280613b035280613b845280613d72528061407a528061410f5250806110c15280611218528061131852806114c3528061166d52806117c452806118e75280611a905280611be75280611cde5280611ecb528061264f52806127a652806129495280612afa5280612c51528061314a528061344b52806136dd5280613709528061385e52806139145280613aad5280613e575280613fae528061414e5280614a955280614ad8528061505b528061514e528061531c5280615739528061582652806159005250615e046000f3fe60806040526004361061018f5760003560e01c80638803dbee116100d6578063c45a01551161007f578063e8e3370011610059578063e8e3370014610c81578063f305d71914610d0e578063fb3bdb4114610d61576101d5565b8063c45a015514610b33578063ded9382a14610b48578063e815c46614610bc8576101d5565b8063af2979eb116100b0578063af2979eb146109d6578063b6f9de9514610a36578063baa2abde14610ac9576101d5565b80638803dbee146108bd578063ad5c464814610962578063ad615dec146109a0576101d5565b806352707d8c116101385780635c11d795116101125780635c11d795146106e0578063791ac947146107855780637ff36ab51461082a576101d5565b806352707d8c146105d6578063571fd012146106245780635b0d598414610660576101d5565b806338ed17391161016957806338ed1739146103d35780634955796c146104785780634a25d94a14610531576101d5565b806302751cec146101da57806318cbafe5146102535780632195995c14610348576101d5565b366101d5573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101d357fe5b005b600080fd5b3480156101e657600080fd5b5061023a600480360360c08110156101fd57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a00135610df4565b6040805192835260208301919091528051918290030190f35b34801561025f57600080fd5b506102f8600480360360a081101561027657600080fd5b81359160208101359181019060608101604082013564010000000081111561029d57600080fd5b8201836020820111156102af57600080fd5b803590602001918460208302840111640100000000831117156102d157600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135610f47565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561033457818101518382015260200161031c565b505050509050019250505060405180910390f35b34801561035457600080fd5b5061023a600480360361016081101561036c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201359160608101359160808201359160a08101359091169060c08101359060e081013515159060ff61010082013516906101208101359061014001356114b9565b3480156103df57600080fd5b506102f8600480360360a08110156103f657600080fd5b81359160208101359181019060608101604082013564010000000081111561041d57600080fd5b82018360208201111561042f57600080fd5b8035906020019184602083028401116401000000008311171561045157600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff81351690602001356115f7565b34801561048457600080fd5b506102f86004803603606081101561049b57600080fd5b813591908101906040810160208201356401000000008111156104bd57600080fd5b8201836020820111156104cf57600080fd5b803590602001918460208302840111640100000000831117156104f157600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050913592506118e0915050565b34801561053d57600080fd5b506102f8600480360360a081101561055457600080fd5b81359160208101359181019060608101604082013564010000000081111561057b57600080fd5b82018360208201111561058d57600080fd5b803590602001918460208302840111640100000000831117156105af57600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135611916565b3480156105e257600080fd5b50610612600480360360808110156105f957600080fd5b5080359060208101359060408101359060600135611cb1565b60408051918252519081900360200190f35b34801561063057600080fd5b506106126004803603608081101561064757600080fd5b5080359060208101359060408101359060600135611cc8565b34801561066c57600080fd5b50610612600480360361014081101561068457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a08101359060c081013515159060ff60e08201351690610100810135906101200135611cd6565b3480156106ec57600080fd5b506101d3600480360360a081101561070357600080fd5b81359160208101359181019060608101604082013564010000000081111561072a57600080fd5b82018360208201111561073c57600080fd5b8035906020019184602083028401116401000000008311171561075e57600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135611e28565b34801561079157600080fd5b506101d3600480360360a08110156107a857600080fd5b8135916020810135918101906060810160408201356401000000008111156107cf57600080fd5b8201836020820111156107e157600080fd5b8035906020019184602083028401116401000000008311171561080357600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff813516906020013561218f565b6102f86004803603608081101561084057600080fd5b8135919081019060408101602082013564010000000081111561086257600080fd5b82018360208201111561087457600080fd5b8035906020019184602083028401116401000000008311171561089657600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff81351690602001356124f6565b3480156108c957600080fd5b506102f8600480360360a08110156108e057600080fd5b81359160208101359181019060608101604082013564010000000081111561090757600080fd5b82018360208201111561091957600080fd5b8035906020019184602083028401116401000000008311171561093b57600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135612a84565b34801561096e57600080fd5b50610977612d1b565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156109ac57600080fd5b50610612600480360360608110156109c357600080fd5b5080359060208101359060400135612d3f565b3480156109e257600080fd5b50610612600480360360c08110156109f957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a00135612d4c565b6101d360048036036080811015610a4c57600080fd5b81359190810190604081016020820135640100000000811115610a6e57600080fd5b820183602082011115610a8057600080fd5b80359060200191846020830284011164010000000083111715610aa257600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135612f30565b348015610ad557600080fd5b5061023a600480360360e0811015610aec57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201359160608101359160808201359160a08101359091169060c001356133d1565b348015610b3f57600080fd5b506109776136db565b348015610b5457600080fd5b5061023a6004803603610140811015610b6c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a08101359060c081013515159060ff60e082013516906101008101359061012001356136ff565b348015610bd457600080fd5b506102f860048036036060811015610beb57600080fd5b81359190810190604081016020820135640100000000811115610c0d57600080fd5b820183602082011115610c1f57600080fd5b80359060200191846020830284011164010000000083111715610c4157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505091359250613857915050565b348015610c8d57600080fd5b50610cf06004803603610100811015610ca557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201359160608101359160808201359160a08101359160c0820135169060e00135613885565b60408051938452602084019290925282820152519081900360600190f35b610cf0600480360360c0811015610d2457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a001356139fe565b6102f860048036036080811015610d7757600080fd5b81359190810190604081016020820135640100000000811115610d9957600080fd5b820183602082011115610dab57600080fd5b80359060200191846020830284011164010000000083111715610dcd57600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135613cfe565b6000808242811015610e6757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f566972616c617461526f757465723a2045585049524544000000000000000000604482015290519081900360640190fd5b610e96897f00000000000000000000000000000000000000000000000000000000000000008a8a8a308a6133d1565b9093509150610ea689868561428f565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610f1957600080fd5b505af1158015610f2d573d6000803e3d6000fd5b50505050610f3b858361446c565b50965096945050505050565b60608142811015610fb957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f566972616c617461526f757465723a2045585049524544000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001686867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061101e57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146110bd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f566972616c617461526f757465723a20494e56414c49445f5041544800000000604482015290519081900360640190fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166321dd70e66040518163ffffffff1660e01b815260040160206040518083038186803b15801561112557600080fd5b505afa158015611139573d6000803e3d6000fd5b505050506040513d602081101561114f57600080fd5b50519050601973ffffffffffffffffffffffffffffffffffffffff8216888860008161117757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061120a57508173ffffffffffffffffffffffffffffffffffffffff16888860018181106111d557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15611213575060325b6112737f00000000000000000000000000000000000000000000000000000000000000008b8a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508792506145a9915050565b9350888460018651038151811061128657fe5b602002602001015110156112e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180615d3a602a913960400191505060405180910390fd5b6113aa888860008181106112f557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16336113907f00000000000000000000000000000000000000000000000000000000000000008c8c600081811061134457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168d8d600181811061136e57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16614711565b8760008151811061139d57fe5b60200260200101516147fc565b6113e9848989808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503092506149cc915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d8560018751038151811061143557fe5b60200260200101516040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561147357600080fd5b505af1158015611487573d6000803e3d6000fd5b505050506114ac868560018751038151811061149f57fe5b602002602001015161446c565b5050509695505050505050565b60008060006114e97f00000000000000000000000000000000000000000000000000000000000000008f8f614711565b90506000876114f8578c61151a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b604080517fd505accf00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101839052606481018c905260ff8a16608482015260a4810189905260c48101889052905191925073ffffffffffffffffffffffffffffffffffffffff84169163d505accf9160e48082019260009290919082900301818387803b1580156115b657600080fd5b505af11580156115ca573d6000803e3d6000fd5b505050506115dd8f8f8f8f8f8f8f6133d1565b809450819550505050509b509b9950505050505050505050565b6060814281101561166957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f566972616c617461526f757465723a2045585049524544000000000000000000604482015290519081900360640190fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166321dd70e66040518163ffffffff1660e01b815260040160206040518083038186803b1580156116d157600080fd5b505afa1580156116e5573d6000803e3d6000fd5b505050506040513d60208110156116fb57600080fd5b50519050601973ffffffffffffffffffffffffffffffffffffffff8216888860008161172357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806117b657508173ffffffffffffffffffffffffffffffffffffffff168888600181811061178157fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b156117bf575060325b61181f7f00000000000000000000000000000000000000000000000000000000000000008b8a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508792506145a9915050565b9350888460018651038151811061183257fe5b60200260200101511015611891576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180615d3a602a913960400191505060405180910390fd5b6118a1888860008181106112f557fe5b6114ac848989808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508b92506149cc915050565b606061190e7f00000000000000000000000000000000000000000000000000000000000000008585856145a9565b949350505050565b6060814281101561198857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f566972616c617461526f757465723a2045585049524544000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001686867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81018181106119ed57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611a8c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f566972616c617461526f757465723a20494e56414c49445f5041544800000000604482015290519081900360640190fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166321dd70e66040518163ffffffff1660e01b815260040160206040518083038186803b158015611af457600080fd5b505afa158015611b08573d6000803e3d6000fd5b505050506040513d6020811015611b1e57600080fd5b50519050601973ffffffffffffffffffffffffffffffffffffffff82168888600081611b4657fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611bd957508173ffffffffffffffffffffffffffffffffffffffff1688886001818110611ba457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15611be2575060325b611c427f00000000000000000000000000000000000000000000000000000000000000008b8a8a80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250614c3d915050565b93508884600081518110611c5257fe5b602002602001015111156112e5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180615c4f6026913960400191505060405180910390fd5b6000611cbf85858585614dcc565b95945050505050565b6000611cbf85858585614ee8565b600080611d247f00000000000000000000000000000000000000000000000000000000000000008d7f0000000000000000000000000000000000000000000000000000000000000000614711565b9050600086611d33578b611d55565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b604080517fd505accf00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101839052606481018b905260ff8916608482015260a4810188905260c48101879052905191925073ffffffffffffffffffffffffffffffffffffffff84169163d505accf9160e48082019260009290919082900301818387803b158015611df157600080fd5b505af1158015611e05573d6000803e3d6000fd5b50505050611e178d8d8d8d8d8d612d4c565b9d9c50505050505050505050505050565b8042811015611e9857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f566972616c617461526f757465723a2045585049524544000000000000000000604482015290519081900360640190fd5b611f2785856000818110611ea857fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1633611f217f000000000000000000000000000000000000000000000000000000000000000089896000818110611ef757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168a8a600181811061136e57fe5b8a6147fc565b600085857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101818110611f5757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611fda57600080fd5b505afa158015611fee573d6000803e3d6000fd5b505050506040513d602081101561200457600080fd5b50516040805160208881028281018201909352888252929350612046929091899189918291850190849080828437600092019190915250889250615004915050565b8661212e8288887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061207957fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156120fc57600080fd5b505afa158015612110573d6000803e3d6000fd5b505050506040513d602081101561212657600080fd5b505190615477565b1015612185576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180615d3a602a913960400191505060405180910390fd5b5050505050505050565b80428110156121ff57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f566972616c617461526f757465723a2045585049524544000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001685857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061226457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461230357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f566972616c617461526f757465723a20494e56414c49445f5041544800000000604482015290519081900360640190fd5b61231385856000818110611ea857fe5b612351858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250615004915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156123da57600080fd5b505afa1580156123ee573d6000803e3d6000fd5b505050506040513d602081101561240457600080fd5b5051905086811015612461576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180615d3a602a913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156124d457600080fd5b505af11580156124e8573d6000803e3d6000fd5b50505050612185848261446c565b6060814281101561256857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f566972616c617461526f757465723a2045585049524544000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16868660008181106125ac57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461264b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f566972616c617461526f757465723a20494e56414c49445f5041544800000000604482015290519081900360640190fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166321dd70e66040518163ffffffff1660e01b815260040160206040518083038186803b1580156126b357600080fd5b505afa1580156126c7573d6000803e3d6000fd5b505050506040513d60208110156126dd57600080fd5b50519050601973ffffffffffffffffffffffffffffffffffffffff8216888860008161270557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061279857508173ffffffffffffffffffffffffffffffffffffffff168888600181811061276357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b156127a1575060325b6128017f0000000000000000000000000000000000000000000000000000000000000000348a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508792506145a9915050565b9350888460018651038151811061281457fe5b60200260200101511015612873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180615d3a602a913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0856000815181106128bc57fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b1580156128ef57600080fd5b505af1158015612903573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61299f7f00000000000000000000000000000000000000000000000000000000000000008b8b600081811061297557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168c8c600181811061136e57fe5b866000815181106129ac57fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612a0757600080fd5b505af1158015612a1b573d6000803e3d6000fd5b505050506040513d6020811015612a3157600080fd5b5051612a3957fe5b612a78848989808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508b92506149cc915050565b50505095945050505050565b60608142811015612af657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f566972616c617461526f757465723a2045585049524544000000000000000000604482015290519081900360640190fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166321dd70e66040518163ffffffff1660e01b815260040160206040518083038186803b158015612b5e57600080fd5b505afa158015612b72573d6000803e3d6000fd5b505050506040513d6020811015612b8857600080fd5b50519050601973ffffffffffffffffffffffffffffffffffffffff82168888600081612bb057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480612c4357508173ffffffffffffffffffffffffffffffffffffffff1688886001818110612c0e57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15612c4c575060325b612cac7f00000000000000000000000000000000000000000000000000000000000000008b8a8a80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250614c3d915050565b93508884600081518110612cbc57fe5b60200260200101511115611891576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180615c4f6026913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b600061190e8484846154ef565b60008142811015612dbe57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f566972616c617461526f757465723a2045585049524544000000000000000000604482015290519081900360640190fd5b612ded887f000000000000000000000000000000000000000000000000000000000000000089898930896133d1565b905080925050612e9088858a73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612e5f57600080fd5b505afa158015612e73573d6000803e3d6000fd5b505050506040513d6020811015612e8957600080fd5b505161428f565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015612f0357600080fd5b505af1158015612f17573d6000803e3d6000fd5b50505050612f25848361446c565b509695505050505050565b8042811015612fa057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f566972616c617461526f757465723a2045585049524544000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1685856000818110612fe457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461308357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f566972616c617461526f757465723a20494e56414c49445f5041544800000000604482015290519081900360640190fd5b60003490507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156130f057600080fd5b505af1158015613104573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6131767f000000000000000000000000000000000000000000000000000000000000000089896000818110611ef757fe5b836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156131ca57600080fd5b505af11580156131de573d6000803e3d6000fd5b505050506040513d60208110156131f457600080fd5b50516131fc57fe5b600086867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061322c57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156132af57600080fd5b505afa1580156132c3573d6000803e3d6000fd5b505050506040513d60208110156132d957600080fd5b5051604080516020898102828101820190935289825292935061331b9290918a918a918291850190849080828437600092019190915250899250615004915050565b8761212e8289897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061334e57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231896040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156120fc57600080fd5b600080824281101561344457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f566972616c617461526f757465723a2045585049524544000000000000000000604482015290519081900360640190fd5b60006134717f00000000000000000000000000000000000000000000000000000000000000008c8c614711565b604080517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff831660248201819052604482018d9052915192935090916323b872dd916064808201926020929091908290030181600087803b1580156134f257600080fd5b505af1158015613506573d6000803e3d6000fd5b505050506040513d602081101561351c57600080fd5b5050604080517f89afcb4400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015282516000938493928616926389afcb44926024808301939282900301818787803b15801561358f57600080fd5b505af11580156135a3573d6000803e3d6000fd5b505050506040513d60408110156135b957600080fd5b508051602090910151909250905060006135d38e8e6155c9565b5090508073ffffffffffffffffffffffffffffffffffffffff168e73ffffffffffffffffffffffffffffffffffffffff1614613610578183613613565b82825b90975095508a871015613671576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180615c756025913960400191505060405180910390fd5b898610156136ca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180615c2a6025913960400191505060405180910390fd5b505050505097509795505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080600061374f7f00000000000000000000000000000000000000000000000000000000000000008e7f0000000000000000000000000000000000000000000000000000000000000000614711565b905060008761375e578c613780565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b604080517fd505accf00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101839052606481018c905260ff8a16608482015260a4810189905260c48101889052905191925073ffffffffffffffffffffffffffffffffffffffff84169163d505accf9160e48082019260009290919082900301818387803b15801561381c57600080fd5b505af1158015613830573d6000803e3d6000fd5b505050506138428e8e8e8e8e8e610df4565b909f909e509c50505050505050505050505050565b606061190e7f0000000000000000000000000000000000000000000000000000000000000000858585614c3d565b600080600083428110156138fa57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f566972616c617461526f757465723a2045585049524544000000000000000000604482015290519081900360640190fd5b6139088c8c8c8c8c8c61571c565b9094509250600061393a7f00000000000000000000000000000000000000000000000000000000000000008e8e614711565b90506139488d3383886147fc565b6139548c3383876147fc565b8073ffffffffffffffffffffffffffffffffffffffff16636a627842886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156139bd57600080fd5b505af11580156139d1573d6000803e3d6000fd5b505050506040513d60208110156139e757600080fd5b5051949d939c50939a509198505050505050505050565b60008060008342811015613a7357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f566972616c617461526f757465723a2045585049524544000000000000000000604482015290519081900360640190fd5b613aa18a7f00000000000000000000000000000000000000000000000000000000000000008b348c8c61571c565b90945092506000613af37f00000000000000000000000000000000000000000000000000000000000000008c7f0000000000000000000000000000000000000000000000000000000000000000614711565b9050613b018b3383886147fc565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b158015613b6957600080fd5b505af1158015613b7d573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015613c1357600080fd5b505af1158015613c27573d6000803e3d6000fd5b505050506040513d6020811015613c3d57600080fd5b5051613c4557fe5b8073ffffffffffffffffffffffffffffffffffffffff16636a627842886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015613cae57600080fd5b505af1158015613cc2573d6000803e3d6000fd5b505050506040513d6020811015613cd857600080fd5b5051925034841015613cf057613cf03385340361446c565b505096509650969350505050565b60608142811015613d7057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f566972616c617461526f757465723a2045585049524544000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1686866000818110613db457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613e5357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f566972616c617461526f757465723a20494e56414c49445f5041544800000000604482015290519081900360640190fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166321dd70e66040518163ffffffff1660e01b815260040160206040518083038186803b158015613ebb57600080fd5b505afa158015613ecf573d6000803e3d6000fd5b505050506040513d6020811015613ee557600080fd5b50519050601973ffffffffffffffffffffffffffffffffffffffff82168888600081613f0d57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480613fa057508173ffffffffffffffffffffffffffffffffffffffff1688886001818110613f6b57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15613fa9575060325b6140097f00000000000000000000000000000000000000000000000000000000000000008a8a8a80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250614c3d915050565b9350348460008151811061401957fe5b60200260200101511115614078576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180615c4f6026913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0856000815181106140c157fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b1580156140f457600080fd5b505af1158015614108573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61417a7f00000000000000000000000000000000000000000000000000000000000000008b8b600081811061297557fe5b8660008151811061418757fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156141e257600080fd5b505af11580156141f6573d6000803e3d6000fd5b505050506040513d602081101561420c57600080fd5b505161421457fe5b614253848989808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508b92506149cc915050565b8360008151811061426057fe5b6020026020010151341115612a7857612a78338560008151811061428057fe5b6020026020010151340361446c565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b6020831061436557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101614328565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146143c7576040519150601f19603f3d011682016040523d82523d6000602084013e6143cc565b606091505b50915091508180156143fa5750805115806143fa57508080602001905160208110156143f757600080fd5b50515b61446557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b5050505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040518082805190602001908083835b602083106144e357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016144a6565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614545576040519150601f19603f3d011682016040523d82523d6000602084013e61454a565b606091505b50509050806145a4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180615d886023913960400191505060405180910390fd5b505050565b606060028351101561461c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f566972616c6174614c6962726172793a20494e56414c49445f50415448000000604482015290519081900360640190fd5b825167ffffffffffffffff8111801561463457600080fd5b5060405190808252806020026020018201604052801561465e578160200160208202803683370190505b509050838160008151811061466f57fe5b60200260200101818152505060005b6001845103811015614708576000806146c18887858151811061469d57fe5b60200260200101518886600101815181106146b457fe5b6020026020010151615a49565b915091506146e48484815181106146d457fe5b6020026020010151838388614dcc565b8484600101815181106146f357fe5b6020908102919091010152505060010161467e565b50949350505050565b600080600061472085856155c9565b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501207fff0000000000000000000000000000000000000000000000000000000000000060688401529a90941b9093166069840152607d8301989098527f1f8a283ca49e2be3a4c310bfa79ed27628edc584d5f528a02daafe1762f41fa2609d808401919091528851808403909101815260bd909201909752805196019590952095945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b602083106148da57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161489d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461493c576040519150601f19603f3d011682016040523d82523d6000602084013e614941565b606091505b509150915081801561496f57508051158061496f575080806020019051602081101561496c57600080fd5b50515b6149c4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180615dab6024913960400191505060405180910390fd5b505050505050565b60005b6001835103811015614c37576000808483815181106149ea57fe5b6020026020010151858460010181518110614a0157fe5b6020026020010151915091506000614a1983836155c9565b5090506000878560010181518110614a2d57fe5b602002602001015190506000808373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614614a7557826000614a79565b6000835b91509150600060028a51038810614a905788614ad1565b614ad17f0000000000000000000000000000000000000000000000000000000000000000878c8b60020181518110614ac457fe5b6020026020010151614711565b9050614afe7f00000000000000000000000000000000000000000000000000000000000000008888614711565b73ffffffffffffffffffffffffffffffffffffffff1663022c0d9f84848460006040519080825280601f01601f191660200182016040528015614b48576020820181803683370190505b506040518563ffffffff1660e01b8152600401808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015614bbd578181015183820152602001614ba5565b50505050905090810190601f168015614bea5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015614c0c57600080fd5b505af1158015614c20573d6000803e3d6000fd5b5050600190990198506149cf975050505050505050565b50505050565b6060600283511015614cb057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f566972616c6174614c6962726172793a20494e56414c49445f50415448000000604482015290519081900360640190fd5b825167ffffffffffffffff81118015614cc857600080fd5b50604051908082528060200260200182016040528015614cf2578160200160208202803683370190505b5090508381600183510381518110614d0657fe5b602090810291909101015282517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff015b801561470857600080614d6688876001860381518110614d5257fe5b60200260200101518886815181106146b457fe5b91509150614d89848481518110614d7957fe5b6020026020010151838388614ee8565b846001850381518110614d9857fe5b602090810291909101015250507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01614d36565b6000808511614e26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180615d10602a913960400191505060405180910390fd5b600084118015614e365750600083115b614e8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180615cbe6027913960400191505060405180910390fd5b6000614e9961271084615477565b90506000614ea78783615b31565b90506000614eb58287615b31565b90506000614ecf83614ec98a612710615b31565b90615bb7565b9050808281614eda57fe5b049998505050505050505050565b6000808511614f42576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180615ce5602b913960400191505060405180910390fd5b600084118015614f525750600083115b614fa7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180615cbe6027913960400191505060405180910390fd5b6000614fb561271084615477565b90506000614fcf612710614fc9888a615b31565b90615b31565b90506000614fe183614fc9888b615477565b9050614ff86001828481614ff157fe5b0490615bb7565b98975050505050505050565b60005b60018351038110156145a45760008084838151811061502257fe5b602002602001015185846001018151811061503957fe5b602002602001015191509150600061505183836155c9565b50905060006150817f00000000000000000000000000000000000000000000000000000000000000008585614711565b90506000806000808473ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156150cf57600080fd5b505afa1580156150e3573d6000803e3d6000fd5b505050506040513d60608110156150f957600080fd5b5080516020909101516dffffffffffffffffffffffffffff918216935016905060008073ffffffffffffffffffffffffffffffffffffffff8a811690891614615143578284615146565b83835b9150915060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166321dd70e66040518163ffffffff1660e01b815260040160206040518083038186803b1580156151b257600080fd5b505afa1580156151c6573d6000803e3d6000fd5b505050506040513d60208110156151dc57600080fd5b50519050601973ffffffffffffffffffffffffffffffffffffffff8c8116908316148061523457508173ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff16145b1561523d575060325b6152a8848d73ffffffffffffffffffffffffffffffffffffffff166370a082318c6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156120fc57600080fd5b97506152b688858584614dcc565b96505050505050506000808573ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16146152fc57826000615300565b6000835b91509150600060028c51038a10615317578a61534b565b61534b7f0000000000000000000000000000000000000000000000000000000000000000898e8d60020181518110614ac457fe5b60408051600080825260208201928390527f022c0d9f000000000000000000000000000000000000000000000000000000008352602482018781526044830187905273ffffffffffffffffffffffffffffffffffffffff8086166064850152608060848501908152845160a48601819052969750908c169563022c0d9f958a958a958a9591949193919260c486019290918190849084905b838110156153fb5781810151838201526020016153e3565b50505050905090810190601f1680156154285780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561544a57600080fd5b505af115801561545e573d6000803e3d6000fd5b50506001909b019a506150079950505050505050505050565b808203828111156154e957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b92915050565b6000808411615549576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180615c9a6024913960400191505060405180910390fd5b6000831180156155595750600082115b6155ae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180615cbe6027913960400191505060405180910390fd5b826155b98584615b31565b816155c057fe5b04949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415615651576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180615d646024913960400191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161061568b57828461568e565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff821661571557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f566972616c6174614c6962726172793a205a45524f5f41444452455353000000604482015290519081900360640190fd5b9250929050565b600080600073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e6a439058a8a6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b1580156157dc57600080fd5b505afa1580156157f0573d6000803e3d6000fd5b505050506040513d602081101561580657600080fd5b505173ffffffffffffffffffffffffffffffffffffffff1614156158f8577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c9c6539689896040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b1580156158cb57600080fd5b505af11580156158df573d6000803e3d6000fd5b505050506040513d60208110156158f557600080fd5b50505b6000806159267f00000000000000000000000000000000000000000000000000000000000000008b8b615a49565b91509150816000148015615938575080155b1561594857879350869250615a3c565b60006159558984846154ef565b90508781116159c257858110156159b7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180615c2a6025913960400191505060405180910390fd5b889450925082615a3a565b60006159cf8984866154ef565b9050898111156159db57fe5b87811015615a34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180615c756025913960400191505060405180910390fd5b94508793505b505b5050965096945050505050565b6000806000615a5885856155c9565b509050600080615a69888888614711565b73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015615aae57600080fd5b505afa158015615ac2573d6000803e3d6000fd5b505050506040513d6060811015615ad857600080fd5b5080516020909101516dffffffffffffffffffffffffffff918216935016905073ffffffffffffffffffffffffffffffffffffffff87811690841614615b1f578082615b22565b81815b90999098509650505050505050565b6000811580615b4c57505080820282828281615b4957fe5b04145b6154e957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b808201828110156154e957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fdfe566972616c617461526f757465723a20494e53554646494349454e545f425f414d4f554e54566972616c617461526f757465723a204558434553534956455f494e5055545f414d4f554e54566972616c617461526f757465723a20494e53554646494349454e545f415f414d4f554e54566972616c6174614c6962726172793a20494e53554646494349454e545f414d4f554e54566972616c6174614c6962726172793a20494e53554646494349454e545f4c4951554944495459566972616c6174614c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e54566972616c6174614c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e54566972616c617461526f757465723a20494e53554646494349454e545f4f55545055545f414d4f554e54566972616c6174614c6962726172793a204944454e544943414c5f4144445245535345535472616e7366657248656c7065723a204554485f5452414e534645525f4641494c45445472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a264697066735822122026634c76150367cdb75bd7c91f61a87f51d26f43888e95871c55811aa6daa11e64736f6c634300060c0033",
  "deployedBytecode": "0x60806040526004361061018f5760003560e01c80638803dbee116100d6578063c45a01551161007f578063e8e3370011610059578063e8e3370014610c81578063f305d71914610d0e578063fb3bdb4114610d61576101d5565b8063c45a015514610b33578063ded9382a14610b48578063e815c46614610bc8576101d5565b8063af2979eb116100b0578063af2979eb146109d6578063b6f9de9514610a36578063baa2abde14610ac9576101d5565b80638803dbee146108bd578063ad5c464814610962578063ad615dec146109a0576101d5565b806352707d8c116101385780635c11d795116101125780635c11d795146106e0578063791ac947146107855780637ff36ab51461082a576101d5565b806352707d8c146105d6578063571fd012146106245780635b0d598414610660576101d5565b806338ed17391161016957806338ed1739146103d35780634955796c146104785780634a25d94a14610531576101d5565b806302751cec146101da57806318cbafe5146102535780632195995c14610348576101d5565b366101d5573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101d357fe5b005b600080fd5b3480156101e657600080fd5b5061023a600480360360c08110156101fd57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a00135610df4565b6040805192835260208301919091528051918290030190f35b34801561025f57600080fd5b506102f8600480360360a081101561027657600080fd5b81359160208101359181019060608101604082013564010000000081111561029d57600080fd5b8201836020820111156102af57600080fd5b803590602001918460208302840111640100000000831117156102d157600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135610f47565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561033457818101518382015260200161031c565b505050509050019250505060405180910390f35b34801561035457600080fd5b5061023a600480360361016081101561036c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201359160608101359160808201359160a08101359091169060c08101359060e081013515159060ff61010082013516906101208101359061014001356114b9565b3480156103df57600080fd5b506102f8600480360360a08110156103f657600080fd5b81359160208101359181019060608101604082013564010000000081111561041d57600080fd5b82018360208201111561042f57600080fd5b8035906020019184602083028401116401000000008311171561045157600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff81351690602001356115f7565b34801561048457600080fd5b506102f86004803603606081101561049b57600080fd5b813591908101906040810160208201356401000000008111156104bd57600080fd5b8201836020820111156104cf57600080fd5b803590602001918460208302840111640100000000831117156104f157600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050913592506118e0915050565b34801561053d57600080fd5b506102f8600480360360a081101561055457600080fd5b81359160208101359181019060608101604082013564010000000081111561057b57600080fd5b82018360208201111561058d57600080fd5b803590602001918460208302840111640100000000831117156105af57600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135611916565b3480156105e257600080fd5b50610612600480360360808110156105f957600080fd5b5080359060208101359060408101359060600135611cb1565b60408051918252519081900360200190f35b34801561063057600080fd5b506106126004803603608081101561064757600080fd5b5080359060208101359060408101359060600135611cc8565b34801561066c57600080fd5b50610612600480360361014081101561068457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a08101359060c081013515159060ff60e08201351690610100810135906101200135611cd6565b3480156106ec57600080fd5b506101d3600480360360a081101561070357600080fd5b81359160208101359181019060608101604082013564010000000081111561072a57600080fd5b82018360208201111561073c57600080fd5b8035906020019184602083028401116401000000008311171561075e57600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135611e28565b34801561079157600080fd5b506101d3600480360360a08110156107a857600080fd5b8135916020810135918101906060810160408201356401000000008111156107cf57600080fd5b8201836020820111156107e157600080fd5b8035906020019184602083028401116401000000008311171561080357600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff813516906020013561218f565b6102f86004803603608081101561084057600080fd5b8135919081019060408101602082013564010000000081111561086257600080fd5b82018360208201111561087457600080fd5b8035906020019184602083028401116401000000008311171561089657600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff81351690602001356124f6565b3480156108c957600080fd5b506102f8600480360360a08110156108e057600080fd5b81359160208101359181019060608101604082013564010000000081111561090757600080fd5b82018360208201111561091957600080fd5b8035906020019184602083028401116401000000008311171561093b57600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135612a84565b34801561096e57600080fd5b50610977612d1b565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156109ac57600080fd5b50610612600480360360608110156109c357600080fd5b5080359060208101359060400135612d3f565b3480156109e257600080fd5b50610612600480360360c08110156109f957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a00135612d4c565b6101d360048036036080811015610a4c57600080fd5b81359190810190604081016020820135640100000000811115610a6e57600080fd5b820183602082011115610a8057600080fd5b80359060200191846020830284011164010000000083111715610aa257600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135612f30565b348015610ad557600080fd5b5061023a600480360360e0811015610aec57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201359160608101359160808201359160a08101359091169060c001356133d1565b348015610b3f57600080fd5b506109776136db565b348015610b5457600080fd5b5061023a6004803603610140811015610b6c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a08101359060c081013515159060ff60e082013516906101008101359061012001356136ff565b348015610bd457600080fd5b506102f860048036036060811015610beb57600080fd5b81359190810190604081016020820135640100000000811115610c0d57600080fd5b820183602082011115610c1f57600080fd5b80359060200191846020830284011164010000000083111715610c4157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505091359250613857915050565b348015610c8d57600080fd5b50610cf06004803603610100811015610ca557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201359160608101359160808201359160a08101359160c0820135169060e00135613885565b60408051938452602084019290925282820152519081900360600190f35b610cf0600480360360c0811015610d2457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a001356139fe565b6102f860048036036080811015610d7757600080fd5b81359190810190604081016020820135640100000000811115610d9957600080fd5b820183602082011115610dab57600080fd5b80359060200191846020830284011164010000000083111715610dcd57600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135613cfe565b6000808242811015610e6757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f566972616c617461526f757465723a2045585049524544000000000000000000604482015290519081900360640190fd5b610e96897f00000000000000000000000000000000000000000000000000000000000000008a8a8a308a6133d1565b9093509150610ea689868561428f565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610f1957600080fd5b505af1158015610f2d573d6000803e3d6000fd5b50505050610f3b858361446c565b50965096945050505050565b60608142811015610fb957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f566972616c617461526f757465723a2045585049524544000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001686867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061101e57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146110bd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f566972616c617461526f757465723a20494e56414c49445f5041544800000000604482015290519081900360640190fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166321dd70e66040518163ffffffff1660e01b815260040160206040518083038186803b15801561112557600080fd5b505afa158015611139573d6000803e3d6000fd5b505050506040513d602081101561114f57600080fd5b50519050601973ffffffffffffffffffffffffffffffffffffffff8216888860008161117757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061120a57508173ffffffffffffffffffffffffffffffffffffffff16888860018181106111d557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15611213575060325b6112737f00000000000000000000000000000000000000000000000000000000000000008b8a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508792506145a9915050565b9350888460018651038151811061128657fe5b602002602001015110156112e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180615d3a602a913960400191505060405180910390fd5b6113aa888860008181106112f557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16336113907f00000000000000000000000000000000000000000000000000000000000000008c8c600081811061134457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168d8d600181811061136e57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16614711565b8760008151811061139d57fe5b60200260200101516147fc565b6113e9848989808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503092506149cc915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d8560018751038151811061143557fe5b60200260200101516040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561147357600080fd5b505af1158015611487573d6000803e3d6000fd5b505050506114ac868560018751038151811061149f57fe5b602002602001015161446c565b5050509695505050505050565b60008060006114e97f00000000000000000000000000000000000000000000000000000000000000008f8f614711565b90506000876114f8578c61151a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b604080517fd505accf00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101839052606481018c905260ff8a16608482015260a4810189905260c48101889052905191925073ffffffffffffffffffffffffffffffffffffffff84169163d505accf9160e48082019260009290919082900301818387803b1580156115b657600080fd5b505af11580156115ca573d6000803e3d6000fd5b505050506115dd8f8f8f8f8f8f8f6133d1565b809450819550505050509b509b9950505050505050505050565b6060814281101561166957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f566972616c617461526f757465723a2045585049524544000000000000000000604482015290519081900360640190fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166321dd70e66040518163ffffffff1660e01b815260040160206040518083038186803b1580156116d157600080fd5b505afa1580156116e5573d6000803e3d6000fd5b505050506040513d60208110156116fb57600080fd5b50519050601973ffffffffffffffffffffffffffffffffffffffff8216888860008161172357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806117b657508173ffffffffffffffffffffffffffffffffffffffff168888600181811061178157fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b156117bf575060325b61181f7f00000000000000000000000000000000000000000000000000000000000000008b8a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508792506145a9915050565b9350888460018651038151811061183257fe5b60200260200101511015611891576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180615d3a602a913960400191505060405180910390fd5b6118a1888860008181106112f557fe5b6114ac848989808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508b92506149cc915050565b606061190e7f00000000000000000000000000000000000000000000000000000000000000008585856145a9565b949350505050565b6060814281101561198857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f566972616c617461526f757465723a2045585049524544000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001686867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81018181106119ed57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611a8c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f566972616c617461526f757465723a20494e56414c49445f5041544800000000604482015290519081900360640190fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166321dd70e66040518163ffffffff1660e01b815260040160206040518083038186803b158015611af457600080fd5b505afa158015611b08573d6000803e3d6000fd5b505050506040513d6020811015611b1e57600080fd5b50519050601973ffffffffffffffffffffffffffffffffffffffff82168888600081611b4657fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611bd957508173ffffffffffffffffffffffffffffffffffffffff1688886001818110611ba457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15611be2575060325b611c427f00000000000000000000000000000000000000000000000000000000000000008b8a8a80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250614c3d915050565b93508884600081518110611c5257fe5b602002602001015111156112e5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180615c4f6026913960400191505060405180910390fd5b6000611cbf85858585614dcc565b95945050505050565b6000611cbf85858585614ee8565b600080611d247f00000000000000000000000000000000000000000000000000000000000000008d7f0000000000000000000000000000000000000000000000000000000000000000614711565b9050600086611d33578b611d55565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b604080517fd505accf00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101839052606481018b905260ff8916608482015260a4810188905260c48101879052905191925073ffffffffffffffffffffffffffffffffffffffff84169163d505accf9160e48082019260009290919082900301818387803b158015611df157600080fd5b505af1158015611e05573d6000803e3d6000fd5b50505050611e178d8d8d8d8d8d612d4c565b9d9c50505050505050505050505050565b8042811015611e9857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f566972616c617461526f757465723a2045585049524544000000000000000000604482015290519081900360640190fd5b611f2785856000818110611ea857fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1633611f217f000000000000000000000000000000000000000000000000000000000000000089896000818110611ef757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168a8a600181811061136e57fe5b8a6147fc565b600085857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101818110611f5757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611fda57600080fd5b505afa158015611fee573d6000803e3d6000fd5b505050506040513d602081101561200457600080fd5b50516040805160208881028281018201909352888252929350612046929091899189918291850190849080828437600092019190915250889250615004915050565b8661212e8288887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061207957fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156120fc57600080fd5b505afa158015612110573d6000803e3d6000fd5b505050506040513d602081101561212657600080fd5b505190615477565b1015612185576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180615d3a602a913960400191505060405180910390fd5b5050505050505050565b80428110156121ff57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f566972616c617461526f757465723a2045585049524544000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001685857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061226457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461230357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f566972616c617461526f757465723a20494e56414c49445f5041544800000000604482015290519081900360640190fd5b61231385856000818110611ea857fe5b612351858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250615004915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156123da57600080fd5b505afa1580156123ee573d6000803e3d6000fd5b505050506040513d602081101561240457600080fd5b5051905086811015612461576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180615d3a602a913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156124d457600080fd5b505af11580156124e8573d6000803e3d6000fd5b50505050612185848261446c565b6060814281101561256857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f566972616c617461526f757465723a2045585049524544000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16868660008181106125ac57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461264b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f566972616c617461526f757465723a20494e56414c49445f5041544800000000604482015290519081900360640190fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166321dd70e66040518163ffffffff1660e01b815260040160206040518083038186803b1580156126b357600080fd5b505afa1580156126c7573d6000803e3d6000fd5b505050506040513d60208110156126dd57600080fd5b50519050601973ffffffffffffffffffffffffffffffffffffffff8216888860008161270557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061279857508173ffffffffffffffffffffffffffffffffffffffff168888600181811061276357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b156127a1575060325b6128017f0000000000000000000000000000000000000000000000000000000000000000348a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508792506145a9915050565b9350888460018651038151811061281457fe5b60200260200101511015612873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180615d3a602a913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0856000815181106128bc57fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b1580156128ef57600080fd5b505af1158015612903573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61299f7f00000000000000000000000000000000000000000000000000000000000000008b8b600081811061297557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168c8c600181811061136e57fe5b866000815181106129ac57fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612a0757600080fd5b505af1158015612a1b573d6000803e3d6000fd5b505050506040513d6020811015612a3157600080fd5b5051612a3957fe5b612a78848989808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508b92506149cc915050565b50505095945050505050565b60608142811015612af657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f566972616c617461526f757465723a2045585049524544000000000000000000604482015290519081900360640190fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166321dd70e66040518163ffffffff1660e01b815260040160206040518083038186803b158015612b5e57600080fd5b505afa158015612b72573d6000803e3d6000fd5b505050506040513d6020811015612b8857600080fd5b50519050601973ffffffffffffffffffffffffffffffffffffffff82168888600081612bb057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480612c4357508173ffffffffffffffffffffffffffffffffffffffff1688886001818110612c0e57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15612c4c575060325b612cac7f00000000000000000000000000000000000000000000000000000000000000008b8a8a80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250614c3d915050565b93508884600081518110612cbc57fe5b60200260200101511115611891576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180615c4f6026913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b600061190e8484846154ef565b60008142811015612dbe57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f566972616c617461526f757465723a2045585049524544000000000000000000604482015290519081900360640190fd5b612ded887f000000000000000000000000000000000000000000000000000000000000000089898930896133d1565b905080925050612e9088858a73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612e5f57600080fd5b505afa158015612e73573d6000803e3d6000fd5b505050506040513d6020811015612e8957600080fd5b505161428f565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015612f0357600080fd5b505af1158015612f17573d6000803e3d6000fd5b50505050612f25848361446c565b509695505050505050565b8042811015612fa057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f566972616c617461526f757465723a2045585049524544000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1685856000818110612fe457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461308357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f566972616c617461526f757465723a20494e56414c49445f5041544800000000604482015290519081900360640190fd5b60003490507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156130f057600080fd5b505af1158015613104573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6131767f000000000000000000000000000000000000000000000000000000000000000089896000818110611ef757fe5b836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156131ca57600080fd5b505af11580156131de573d6000803e3d6000fd5b505050506040513d60208110156131f457600080fd5b50516131fc57fe5b600086867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061322c57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156132af57600080fd5b505afa1580156132c3573d6000803e3d6000fd5b505050506040513d60208110156132d957600080fd5b5051604080516020898102828101820190935289825292935061331b9290918a918a918291850190849080828437600092019190915250899250615004915050565b8761212e8289897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061334e57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231896040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156120fc57600080fd5b600080824281101561344457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f566972616c617461526f757465723a2045585049524544000000000000000000604482015290519081900360640190fd5b60006134717f00000000000000000000000000000000000000000000000000000000000000008c8c614711565b604080517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff831660248201819052604482018d9052915192935090916323b872dd916064808201926020929091908290030181600087803b1580156134f257600080fd5b505af1158015613506573d6000803e3d6000fd5b505050506040513d602081101561351c57600080fd5b5050604080517f89afcb4400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015282516000938493928616926389afcb44926024808301939282900301818787803b15801561358f57600080fd5b505af11580156135a3573d6000803e3d6000fd5b505050506040513d60408110156135b957600080fd5b508051602090910151909250905060006135d38e8e6155c9565b5090508073ffffffffffffffffffffffffffffffffffffffff168e73ffffffffffffffffffffffffffffffffffffffff1614613610578183613613565b82825b90975095508a871015613671576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180615c756025913960400191505060405180910390fd5b898610156136ca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180615c2a6025913960400191505060405180910390fd5b505050505097509795505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080600061374f7f00000000000000000000000000000000000000000000000000000000000000008e7f0000000000000000000000000000000000000000000000000000000000000000614711565b905060008761375e578c613780565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b604080517fd505accf00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101839052606481018c905260ff8a16608482015260a4810189905260c48101889052905191925073ffffffffffffffffffffffffffffffffffffffff84169163d505accf9160e48082019260009290919082900301818387803b15801561381c57600080fd5b505af1158015613830573d6000803e3d6000fd5b505050506138428e8e8e8e8e8e610df4565b909f909e509c50505050505050505050505050565b606061190e7f0000000000000000000000000000000000000000000000000000000000000000858585614c3d565b600080600083428110156138fa57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f566972616c617461526f757465723a2045585049524544000000000000000000604482015290519081900360640190fd5b6139088c8c8c8c8c8c61571c565b9094509250600061393a7f00000000000000000000000000000000000000000000000000000000000000008e8e614711565b90506139488d3383886147fc565b6139548c3383876147fc565b8073ffffffffffffffffffffffffffffffffffffffff16636a627842886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156139bd57600080fd5b505af11580156139d1573d6000803e3d6000fd5b505050506040513d60208110156139e757600080fd5b5051949d939c50939a509198505050505050505050565b60008060008342811015613a7357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f566972616c617461526f757465723a2045585049524544000000000000000000604482015290519081900360640190fd5b613aa18a7f00000000000000000000000000000000000000000000000000000000000000008b348c8c61571c565b90945092506000613af37f00000000000000000000000000000000000000000000000000000000000000008c7f0000000000000000000000000000000000000000000000000000000000000000614711565b9050613b018b3383886147fc565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b158015613b6957600080fd5b505af1158015613b7d573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015613c1357600080fd5b505af1158015613c27573d6000803e3d6000fd5b505050506040513d6020811015613c3d57600080fd5b5051613c4557fe5b8073ffffffffffffffffffffffffffffffffffffffff16636a627842886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015613cae57600080fd5b505af1158015613cc2573d6000803e3d6000fd5b505050506040513d6020811015613cd857600080fd5b5051925034841015613cf057613cf03385340361446c565b505096509650969350505050565b60608142811015613d7057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f566972616c617461526f757465723a2045585049524544000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1686866000818110613db457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613e5357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f566972616c617461526f757465723a20494e56414c49445f5041544800000000604482015290519081900360640190fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166321dd70e66040518163ffffffff1660e01b815260040160206040518083038186803b158015613ebb57600080fd5b505afa158015613ecf573d6000803e3d6000fd5b505050506040513d6020811015613ee557600080fd5b50519050601973ffffffffffffffffffffffffffffffffffffffff82168888600081613f0d57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480613fa057508173ffffffffffffffffffffffffffffffffffffffff1688886001818110613f6b57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15613fa9575060325b6140097f00000000000000000000000000000000000000000000000000000000000000008a8a8a80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250614c3d915050565b9350348460008151811061401957fe5b60200260200101511115614078576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180615c4f6026913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0856000815181106140c157fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b1580156140f457600080fd5b505af1158015614108573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61417a7f00000000000000000000000000000000000000000000000000000000000000008b8b600081811061297557fe5b8660008151811061418757fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156141e257600080fd5b505af11580156141f6573d6000803e3d6000fd5b505050506040513d602081101561420c57600080fd5b505161421457fe5b614253848989808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508b92506149cc915050565b8360008151811061426057fe5b6020026020010151341115612a7857612a78338560008151811061428057fe5b6020026020010151340361446c565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b6020831061436557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101614328565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146143c7576040519150601f19603f3d011682016040523d82523d6000602084013e6143cc565b606091505b50915091508180156143fa5750805115806143fa57508080602001905160208110156143f757600080fd5b50515b61446557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b5050505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040518082805190602001908083835b602083106144e357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016144a6565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614545576040519150601f19603f3d011682016040523d82523d6000602084013e61454a565b606091505b50509050806145a4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180615d886023913960400191505060405180910390fd5b505050565b606060028351101561461c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f566972616c6174614c6962726172793a20494e56414c49445f50415448000000604482015290519081900360640190fd5b825167ffffffffffffffff8111801561463457600080fd5b5060405190808252806020026020018201604052801561465e578160200160208202803683370190505b509050838160008151811061466f57fe5b60200260200101818152505060005b6001845103811015614708576000806146c18887858151811061469d57fe5b60200260200101518886600101815181106146b457fe5b6020026020010151615a49565b915091506146e48484815181106146d457fe5b6020026020010151838388614dcc565b8484600101815181106146f357fe5b6020908102919091010152505060010161467e565b50949350505050565b600080600061472085856155c9565b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501207fff0000000000000000000000000000000000000000000000000000000000000060688401529a90941b9093166069840152607d8301989098527f1f8a283ca49e2be3a4c310bfa79ed27628edc584d5f528a02daafe1762f41fa2609d808401919091528851808403909101815260bd909201909752805196019590952095945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b602083106148da57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161489d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461493c576040519150601f19603f3d011682016040523d82523d6000602084013e614941565b606091505b509150915081801561496f57508051158061496f575080806020019051602081101561496c57600080fd5b50515b6149c4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180615dab6024913960400191505060405180910390fd5b505050505050565b60005b6001835103811015614c37576000808483815181106149ea57fe5b6020026020010151858460010181518110614a0157fe5b6020026020010151915091506000614a1983836155c9565b5090506000878560010181518110614a2d57fe5b602002602001015190506000808373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614614a7557826000614a79565b6000835b91509150600060028a51038810614a905788614ad1565b614ad17f0000000000000000000000000000000000000000000000000000000000000000878c8b60020181518110614ac457fe5b6020026020010151614711565b9050614afe7f00000000000000000000000000000000000000000000000000000000000000008888614711565b73ffffffffffffffffffffffffffffffffffffffff1663022c0d9f84848460006040519080825280601f01601f191660200182016040528015614b48576020820181803683370190505b506040518563ffffffff1660e01b8152600401808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015614bbd578181015183820152602001614ba5565b50505050905090810190601f168015614bea5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015614c0c57600080fd5b505af1158015614c20573d6000803e3d6000fd5b5050600190990198506149cf975050505050505050565b50505050565b6060600283511015614cb057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f566972616c6174614c6962726172793a20494e56414c49445f50415448000000604482015290519081900360640190fd5b825167ffffffffffffffff81118015614cc857600080fd5b50604051908082528060200260200182016040528015614cf2578160200160208202803683370190505b5090508381600183510381518110614d0657fe5b602090810291909101015282517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff015b801561470857600080614d6688876001860381518110614d5257fe5b60200260200101518886815181106146b457fe5b91509150614d89848481518110614d7957fe5b6020026020010151838388614ee8565b846001850381518110614d9857fe5b602090810291909101015250507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01614d36565b6000808511614e26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180615d10602a913960400191505060405180910390fd5b600084118015614e365750600083115b614e8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180615cbe6027913960400191505060405180910390fd5b6000614e9961271084615477565b90506000614ea78783615b31565b90506000614eb58287615b31565b90506000614ecf83614ec98a612710615b31565b90615bb7565b9050808281614eda57fe5b049998505050505050505050565b6000808511614f42576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180615ce5602b913960400191505060405180910390fd5b600084118015614f525750600083115b614fa7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180615cbe6027913960400191505060405180910390fd5b6000614fb561271084615477565b90506000614fcf612710614fc9888a615b31565b90615b31565b90506000614fe183614fc9888b615477565b9050614ff86001828481614ff157fe5b0490615bb7565b98975050505050505050565b60005b60018351038110156145a45760008084838151811061502257fe5b602002602001015185846001018151811061503957fe5b602002602001015191509150600061505183836155c9565b50905060006150817f00000000000000000000000000000000000000000000000000000000000000008585614711565b90506000806000808473ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156150cf57600080fd5b505afa1580156150e3573d6000803e3d6000fd5b505050506040513d60608110156150f957600080fd5b5080516020909101516dffffffffffffffffffffffffffff918216935016905060008073ffffffffffffffffffffffffffffffffffffffff8a811690891614615143578284615146565b83835b9150915060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166321dd70e66040518163ffffffff1660e01b815260040160206040518083038186803b1580156151b257600080fd5b505afa1580156151c6573d6000803e3d6000fd5b505050506040513d60208110156151dc57600080fd5b50519050601973ffffffffffffffffffffffffffffffffffffffff8c8116908316148061523457508173ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff16145b1561523d575060325b6152a8848d73ffffffffffffffffffffffffffffffffffffffff166370a082318c6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156120fc57600080fd5b97506152b688858584614dcc565b96505050505050506000808573ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16146152fc57826000615300565b6000835b91509150600060028c51038a10615317578a61534b565b61534b7f0000000000000000000000000000000000000000000000000000000000000000898e8d60020181518110614ac457fe5b60408051600080825260208201928390527f022c0d9f000000000000000000000000000000000000000000000000000000008352602482018781526044830187905273ffffffffffffffffffffffffffffffffffffffff8086166064850152608060848501908152845160a48601819052969750908c169563022c0d9f958a958a958a9591949193919260c486019290918190849084905b838110156153fb5781810151838201526020016153e3565b50505050905090810190601f1680156154285780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561544a57600080fd5b505af115801561545e573d6000803e3d6000fd5b50506001909b019a506150079950505050505050505050565b808203828111156154e957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b92915050565b6000808411615549576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180615c9a6024913960400191505060405180910390fd5b6000831180156155595750600082115b6155ae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180615cbe6027913960400191505060405180910390fd5b826155b98584615b31565b816155c057fe5b04949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415615651576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180615d646024913960400191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161061568b57828461568e565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff821661571557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f566972616c6174614c6962726172793a205a45524f5f41444452455353000000604482015290519081900360640190fd5b9250929050565b600080600073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e6a439058a8a6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b1580156157dc57600080fd5b505afa1580156157f0573d6000803e3d6000fd5b505050506040513d602081101561580657600080fd5b505173ffffffffffffffffffffffffffffffffffffffff1614156158f8577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c9c6539689896040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b1580156158cb57600080fd5b505af11580156158df573d6000803e3d6000fd5b505050506040513d60208110156158f557600080fd5b50505b6000806159267f00000000000000000000000000000000000000000000000000000000000000008b8b615a49565b91509150816000148015615938575080155b1561594857879350869250615a3c565b60006159558984846154ef565b90508781116159c257858110156159b7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180615c2a6025913960400191505060405180910390fd5b889450925082615a3a565b60006159cf8984866154ef565b9050898111156159db57fe5b87811015615a34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180615c756025913960400191505060405180910390fd5b94508793505b505b5050965096945050505050565b6000806000615a5885856155c9565b509050600080615a69888888614711565b73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015615aae57600080fd5b505afa158015615ac2573d6000803e3d6000fd5b505050506040513d6060811015615ad857600080fd5b5080516020909101516dffffffffffffffffffffffffffff918216935016905073ffffffffffffffffffffffffffffffffffffffff87811690841614615b1f578082615b22565b81815b90999098509650505050505050565b6000811580615b4c57505080820282828281615b4957fe5b04145b6154e957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b808201828110156154e957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fdfe566972616c617461526f757465723a20494e53554646494349454e545f425f414d4f554e54566972616c617461526f757465723a204558434553534956455f494e5055545f414d4f554e54566972616c617461526f757465723a20494e53554646494349454e545f415f414d4f554e54566972616c6174614c6962726172793a20494e53554646494349454e545f414d4f554e54566972616c6174614c6962726172793a20494e53554646494349454e545f4c4951554944495459566972616c6174614c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e54566972616c6174614c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e54566972616c617461526f757465723a20494e53554646494349454e545f4f55545055545f414d4f554e54566972616c6174614c6962726172793a204944454e544943414c5f4144445245535345535472616e7366657248656c7065723a204554485f5452414e534645525f4641494c45445472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a264697066735822122026634c76150367cdb75bd7c91f61a87f51d26f43888e95871c55811aa6daa11e64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}