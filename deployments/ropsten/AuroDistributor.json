{
  "address": "0xFD79B61bf8b3af80e0648964b3dDc1F21B35D4aa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAuroERC20",
          "name": "_auro",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_auroPerBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "AllocPointsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "DevAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "EmissionRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "FeeAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOperator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOperator",
          "type": "address"
        }
      ],
      "name": "OperatorTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountLockedUp",
          "type": "uint256"
        }
      ],
      "name": "RewardLockedUp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_DEPOSIT_FEE_RATE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_HARVEST_INTERVAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_depositFeeBP",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_harvestInterval",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auro",
      "outputs": [
        {
          "internalType": "contract IAuroERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auroPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "canHarvest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingAuro",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accAuroPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "depositFeeBP",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "harvestInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalLp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_depositFeeBP",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_harvestInterval",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_devAddress",
          "type": "address"
        }
      ],
      "name": "setDevAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        }
      ],
      "name": "setFeeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startFarming",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAuroInPools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLockedUpRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOperator",
          "type": "address"
        }
      ],
      "name": "transferOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "updateAllocPoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auroPerBlock",
          "type": "uint256"
        }
      ],
      "name": "updateEmissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardLockedUp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nextHarvestUntil",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2417a290d93750b485e75d45899235c0c5828be2e35e249756c7e5fcb71ca0e3",
  "receipt": {
    "to": null,
    "from": "0xeAD468684102da07294006F96376FF78b760C9BD",
    "contractAddress": "0xFD79B61bf8b3af80e0648964b3dDc1F21B35D4aa",
    "transactionIndex": 1,
    "gasUsed": "2438728",
    "logsBloom": "0x
    "blockHash": "0x99a4b32f76509ea36688d46cd94778317a75c1e6bb3e8721d911288299b83b3c",
    "transactionHash": "0x2417a290d93750b485e75d45899235c0c5828be2e35e249756c7e5fcb71ca0e3",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 10807628,
        "transactionHash": "0x2417a290d93750b485e75d45899235c0c5828be2e35e249756c7e5fcb71ca0e3",
        "address": "0xFD79B61bf8b3af80e0648964b3dDc1F21B35D4aa",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ead468684102da07294006f96376ff78b760c9bd"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x99a4b32f76509ea36688d46cd94778317a75c1e6bb3e8721d911288299b83b3c"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10807628,
        "transactionHash": "0x2417a290d93750b485e75d45899235c0c5828be2e35e249756c7e5fcb71ca0e3",
        "address": "0xFD79B61bf8b3af80e0648964b3dDc1F21B35D4aa",
        "topics": [
          "0x74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ead468684102da07294006f96376ff78b760c9bd"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x99a4b32f76509ea36688d46cd94778317a75c1e6bb3e8721d911288299b83b3c"
      }
    ],
    "blockNumber": 10807628,
    "cumulativeGasUsed": "2561692",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaBE380931cd3Ae6E7197337BBC7462CCb8b90f46",
    "60000000000000000000"
  ],
  "solcInputHash": "63c400612d54c4924589f916d95253a8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAuroERC20\",\"name\":\"_auro\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_auroPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"AllocPointsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"DevAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"EmissionRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"FeeAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLockedUp\",\"type\":\"uint256\"}],\"name\":\"RewardLockedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_DEPOSIT_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_HARVEST_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auro\",\"outputs\":[{\"internalType\":\"contract IAuroERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auroPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canHarvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingAuro\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accAuroPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAuroInPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedUpRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"updateAllocPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auroPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardLockedUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextHarvestUntil\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/AuroDistributor.sol\":\"AuroDistributor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/farm/AuroDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./IAuroERC20.sol\\\";\\n\\ncontract AuroDistributor is Ownable, ReentrancyGuard {\\n\\n    // remember to change for mainnet deploy\\n    address constant _trustedForwarder = 0xEa9983bBb6FD1f95cd0A40275c6aC51B56Ae6176;\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardLockedUp; // Reward locked up.\\n        uint256 nextHarvestUntil; // When can the user harvest again.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. AURO to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that AURO distribution occurs.\\n        uint256 accAuroPerShare; // Accumulated AURO per share, times 1e12. See below.\\n        uint16 depositFeeBP; // Deposit fee in basis points\\n        uint256 harvestInterval; // Harvest interval in seconds\\n        uint256 totalLp; // Total token in Pool\\n    }\\n\\n    IAuroERC20 public auro;\\n\\n    // The operator can only update EmissionRate and AllocPoint to protect tokenomics\\n    //i.e some wrong setting and a pools get too much allocation accidentally\\n    address private _operator;\\n\\n    // Dev address.\\n    address public devAddress;\\n\\n    // Deposit Fee address\\n    address public feeAddress;\\n\\n    // AURO tokens created per block\\n    uint256 public auroPerBlock;\\n\\n    // Max harvest interval: 14 days\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\n\\n    // Maximum deposit fee rate: 10%\\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\\n\\n    // Info of each pool\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The block number when AURO mining starts.\\n    uint256 public startBlock;\\n\\n    // Total locked up rewards\\n    uint256 public totalLockedUpRewards;\\n\\n    // Total AURO in AURO Pools (can be multiple pools)\\n    uint256 public totalAuroInPools = 0;\\n\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmissionRateUpdated(address indexed caller, uint256 previousAmount, uint256 newAmount);\\n    event RewardLockedUp(address indexed user, uint256 indexed pid, uint256 amountLockedUp);\\n    event OperatorTransferred(address indexed previousOperator, address indexed newOperator);\\n    event DevAddressChanged(address indexed caller, address oldAddress, address newAddress);\\n    event FeeAddressChanged(address indexed caller, address oldAddress, address newAddress);\\n    event AllocPointsUpdated(address indexed caller, uint256 previousAmount, uint256 newAmount);\\n\\n    modifier onlyOperator() {\\n        require(_operator == msg.sender, \\\"Operator: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        IAuroERC20 _auro,\\n        uint256 _auroPerBlock\\n    ) {\\n        //StartBlock always many years later from contract construct, will be set later in StartFarming function\\n        startBlock = block.number + (10 * 365 * 24 * 60 * 60);\\n\\n        auro = _auro;\\n        auroPerBlock = _auroPerBlock;\\n\\n        devAddress = msg.sender;\\n        feeAddress = msg.sender;\\n        _operator = msg.sender;\\n        emit OperatorTransferred(address(0), _operator);\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    function operator() public view returns (address) {\\n        return _operator;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\\n        return _to.sub(_from);\\n    }\\n\\n    function transferOperator(address newOperator) public onlyOperator {\\n        require(newOperator != address(0), \\\"TransferOperator: new operator is the zero address\\\");\\n        emit OperatorTransferred(_operator, newOperator);\\n        _operator = newOperator;\\n    }\\n\\n    // Set farming start, can call only once\\n    function startFarming() public onlyOwner {\\n        require(block.number < startBlock, \\\"Error::Farm started already\\\");\\n\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo storage pool = poolInfo[pid];\\n            pool.lastRewardBlock = block.number;\\n        }\\n\\n        startBlock = block.number;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        require(_depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE, \\\"add: deposit fee too high\\\");\\n        require(_harvestInterval <= MAXIMUM_HARVEST_INTERVAL, \\\"add: invalid harvest interval\\\");\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(PoolInfo({lpToken: _lpToken, allocPoint: _allocPoint, lastRewardBlock: lastRewardBlock, accAuroPerShare: 0, depositFeeBP: _depositFeeBP, harvestInterval: _harvestInterval, totalLp: 0}));\\n    }\\n\\n    // Update the given pool's AURO allocation point and deposit fee. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        require(_depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE, \\\"set: deposit fee too high\\\");\\n        require(_harvestInterval <= MAXIMUM_HARVEST_INTERVAL, \\\"set: invalid harvest interval\\\");\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\\n        poolInfo[_pid].harvestInterval = _harvestInterval;\\n    }\\n\\n    // View function to see pending AURO on frontend.\\n    function pendingAuro(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accAuroPerShare = pool.accAuroPerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n            uint256 auroReward = multiplier.mul(auroPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n            accAuroPerShare = accAuroPerShare.add(auroReward.mul(1e12).div(lpSupply));\\n        }\\n\\n        uint256 pending = user.amount.mul(accAuroPerShare).div(1e12).sub(user.rewardDebt);\\n        return pending.add(user.rewardLockedUp);\\n    }\\n\\n    // View function to see if user can harvest AURO.\\n    function canHarvest(uint256 _pid, address _user) public view returns (bool) {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        return block.number >= startBlock && block.timestamp >= user.nextHarvestUntil;\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (lpSupply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 auroReward =\\n            multiplier.mul(auroPerBlock).mul(pool.allocPoint).div(\\n                totalAllocPoint\\n            );\\n\\n        auro.mint(devAddress, auroReward.div(10));\\n        auro.mint(address(this), auroReward);\\n\\n        pool.accAuroPerShare = pool.accAuroPerShare.add(\\n            auroReward.mul(1e12).div(pool.totalLp)\\n        );\\n        pool.lastRewardBlock = block.number;\\n\\n\\n    }\\n\\n    // Deposit LP tokens to MasterChef for AURO allocation.\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\\n        require(block.number >= startBlock, \\\"AuroDistributor: Can not deposit before start\\\");\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        updatePool(_pid);\\n\\n        payOrLockupPendingAuro(_pid);\\n\\n        if (_amount > 0) {\\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(_msgSender(), address(this), _amount);\\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\\n\\n            _amount = afterDeposit.sub(beforeDeposit);\\n\\n            if (pool.depositFeeBP > 0) {\\n                uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\\n                pool.lpToken.safeTransfer(feeAddress, depositFee);\\n\\n                _amount = _amount.sub(depositFee);\\n            }\\n            \\n            user.amount = user.amount.add(_amount);\\n            pool.totalLp = pool.totalLp.add(_amount);\\n\\n            if (address(pool.lpToken) == address(auro)) {\\n                totalAuroInPools = totalAuroInPools.add(_amount);\\n            }\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accAuroPerShare).div(1e12);\\n        emit Deposit(_msgSender(), _pid, _amount);\\n    }\\n\\n    // Withdraw tokens\\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        //this will make sure that user can only withdraw from his pool\\n        require(user.amount >= _amount, \\\"Withdraw: User amount not enough\\\");\\n\\n        //Cannot withdraw more than pool's balance\\n        require(pool.totalLp >= _amount, \\\"Withdraw: Pool total not enough\\\");\\n\\n        updatePool(_pid);\\n\\n        payOrLockupPendingAuro(_pid);\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.totalLp = pool.totalLp.sub(_amount);\\n            if (address(pool.lpToken) == address(auro)) {\\n                totalAuroInPools = totalAuroInPools.sub(_amount);\\n            }\\n            pool.lpToken.safeTransfer(_msgSender(), _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accAuroPerShare).div(1e12);\\n        emit Withdraw(_msgSender(), _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n        uint256 amount = user.amount;\\n\\n        //Cannot withdraw more than pool's balance\\n        require(pool.totalLp >= amount, \\\"EmergencyWithdraw: Pool total not enough\\\");\\n\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        user.rewardLockedUp = 0;\\n        user.nextHarvestUntil = 0;\\n        pool.totalLp = pool.totalLp.sub(amount);\\n\\n        if (address(pool.lpToken) == address(auro)) {\\n            totalAuroInPools = totalAuroInPools.sub(amount);\\n        }\\n        pool.lpToken.safeTransfer(_msgSender(), amount);\\n\\n        emit EmergencyWithdraw(_msgSender(), _pid, amount);\\n    }\\n\\n    // Pay or lockup pending AURO.\\n    function payOrLockupPendingAuro(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        if (user.nextHarvestUntil == 0 && block.number >= startBlock) {\\n            user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\\n        }\\n\\n        uint256 pending = user.amount.mul(pool.accAuroPerShare).div(1e12).sub(user.rewardDebt);\\n        if (canHarvest(_pid, _msgSender())) {\\n            if (pending > 0 || user.rewardLockedUp > 0) {\\n                uint256 totalRewards = pending.add(user.rewardLockedUp);\\n\\n                // reset lockup\\n                totalLockedUpRewards = totalLockedUpRewards.sub(user.rewardLockedUp);\\n                user.rewardLockedUp = 0;\\n                user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\\n\\n                // send rewards\\n                safeAuroTransfer(_msgSender(), totalRewards);\\n            }\\n        } else if (pending > 0) {\\n            user.rewardLockedUp = user.rewardLockedUp.add(pending);\\n            totalLockedUpRewards = totalLockedUpRewards.add(pending);\\n            emit RewardLockedUp(_msgSender(), _pid, pending);\\n        }\\n    }\\n\\n    // Safe AURO transfer function, just in case if rounding error causes pool do not have enough AURO.\\n    function safeAuroTransfer(address _to, uint256 _amount) internal {\\n        if (auro.balanceOf(address(this)) > totalAuroInPools) {\\n            //auroBal = total AURO in AuroDistributor - total AURO in AURO pools, this will make sure that AuroDistributor never transfer rewards from deposited AURO pools\\n            uint256 auroBal = auro.balanceOf(address(this)).sub(totalAuroInPools);\\n            if (_amount >= auroBal) {\\n                auro.transfer(_to, auroBal);\\n            } else if (_amount > 0) {\\n                auro.transfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    // Update dev address by the previous dev.\\n    function setDevAddress(address _devAddress) public {\\n        require(_msgSender() == devAddress, \\\"setDevAddress: FORBIDDEN\\\");\\n        require(_devAddress != address(0), \\\"setDevAddress: ZERO\\\");\\n\\n        emit DevAddressChanged(_msgSender(), devAddress, _devAddress);\\n\\n        devAddress = _devAddress;\\n    }\\n\\n    function setFeeAddress(address _feeAddress) public {\\n        require(_msgSender() == feeAddress, \\\"setFeeAddress: FORBIDDEN\\\");\\n        require(_feeAddress != address(0), \\\"setFeeAddress: ZERO\\\");\\n\\n        emit FeeAddressChanged(_msgSender(), feeAddress, _feeAddress);\\n\\n        feeAddress = _feeAddress;\\n    }\\n\\n    // Pancake has to add hidden dummy pools in order to alter the emission, here we make it simple and transparent to all.\\n    function updateEmissionRate(uint256 _auroPerBlock) public onlyOperator {\\n        massUpdatePools();\\n\\n        emit EmissionRateUpdated(msg.sender, auroPerBlock, _auroPerBlock);\\n        auroPerBlock = _auroPerBlock;\\n    }\\n\\n    function updateAllocPoint(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyOperator {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        emit AllocPointsUpdated(_msgSender(), poolInfo[_pid].allocPoint, _allocPoint);\\n\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n}\\n\",\"keccak256\":\"0xe6f4df9f3d55cc0d6369bdf154981e4a0c0c56a98e0d2456fe7cd9ec975a8298\",\"license\":\"MIT\"},\"contracts/farm/IAuroERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IAuroERC20 is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x3810c98e9d6aa8b0ec21840ac8c5155a6b36d2257fdd7ec62a1b2955b1c271c1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260006009556000600c553480156200001b57600080fd5b506040516200299e3803806200299e8339810160408190526200003e9162000184565b620000526200004c620000e6565b62000130565b6001805562000066436312cc0300620001be565b600a55600280546001600160a01b038085166001600160a01b031992831617909255600683905560048054821633908117909155600580548316821790556003805490921617908190556040519116906000907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed908290a35050620001e3565b600073ea9983bbb6fd1f95cd0a40275c6ac51b56ae617633141562000115575060131936013560601c6200012d565b6200012a6200018060201b62001ccc1760201c565b90505b90565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3390565b6000806040838503121562000197578182fd5b82516001600160a01b0381168114620001ae578283fd5b6020939093015192949293505050565b60008219821115620001de57634e487b7160e01b81526011600452602481fd5b500190565b6127ab80620001f36000396000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c8063630b5ba11161011a578063a1f5a3eb116100ad578063d0d41fe11161007c578063d0d41fe1146104b0578063de73149d146104c3578063e2bbb158146104cd578063e663f31e146104e0578063f2fde38b146104e957610206565b8063a1f5a3eb14610479578063af018de814610482578063afbcfea114610495578063bde4aeca1461049d57610206565b80638da5cb5b116100e95780638da5cb5b146103e25780638dbb1e3a146103f357806393acfc481461040657806393f1a40b1461041957610206565b8063630b5ba1146103a3578063715018a6146103ab578063812c64f1146103b35780638705fcd4146103cf57610206565b80633ad10ef61161019d57806348cd4cb11161016c57806348cd4cb11461035057806351eb05a6146103595780635312ea8e1461036c578063570ca7351461037f578063572b6c051461039057610206565b80633ad10ef61461030e5780634127535814610321578063441a3e7014610334578063474fa6301461034757610206565b80632143e545116101d95780632143e5451461029a57806321dd70e6146102ad57806329605e77146102d85780632e6c998d146102eb57610206565b8063081e3eda1461020b5780630ba84cd2146102265780631526fe271461023b57806317caf6f114610291575b600080fd5b6102136104fc565b6040519081526020015b60405180910390f35b610239610234366004612446565b610503565b005b61024e610249366004612446565b610581565b604080516001600160a01b039098168852602088019690965294860193909352606085019190915261ffff16608084015260a083015260c082015260e00161021d565b61021360095481565b6102396102a836600461255a565b6105de565b6002546102c0906001600160a01b031681565b6040516001600160a01b03909116815260200161021d565b6102396102e636600461240e565b6107f7565b6102fe6102f9366004612476565b6108ee565b604051901515815260200161021d565b6004546102c0906001600160a01b031681565b6005546102c0906001600160a01b031681565b610239610342366004612501565b61092e565b610213600b5481565b610213600a5481565b610239610367366004612446565b610b68565b61023961037a366004612446565b610d9e565b6003546001600160a01b03166102c0565b6102fe61039e36600461240e565b610f4c565b610239610f72565b610239610f9d565b6103bc6103e881565b60405161ffff909116815260200161021d565b6102396103dd36600461240e565b610ff2565b6000546001600160a01b03166102c0565b610213610401366004612501565b61111e565b610213610414366004612476565b611131565b610459610427366004612476565b600860209081526000928352604080842090915290825290208054600182015460028301546003909301549192909184565b60408051948552602085019390935291830152606082015260800161021d565b610213600c5481565b6102396104903660046124a5565b6112cc565b610239611580565b6102396104ab366004612522565b61167e565b6102396104be36600461240e565b6117a5565b6102136212750081565b6102396104db366004612501565b6118d1565b61021360065481565b6102396104f736600461240e565b611c15565b6007545b90565b6003546001600160a01b031633146105365760405162461bcd60e51b815260040161052d90612643565b60405180910390fd5b61053e610f72565b600654604080519182526020820183905233917feedc6338c9c1ad8f3cd6c90dd09dbe98dbd57e610d3e59a17996d07acb0d9511910160405180910390a2600655565b6007818154811061059157600080fd5b600091825260209091206007909102018054600182015460028301546003840154600485015460058601546006909601546001600160a01b03909516965092949193909261ffff16919087565b6105e6611cd0565b6001600160a01b03166106016000546001600160a01b031690565b6001600160a01b0316146106275760405162461bcd60e51b815260040161052d906125d7565b6103e861ffff8416111561067d5760405162461bcd60e51b815260206004820152601960248201527f7365743a206465706f7369742066656520746f6f206869676800000000000000604482015260640161052d565b621275008211156106d05760405162461bcd60e51b815260206004820152601d60248201527f7365743a20696e76616c6964206861727665737420696e74657276616c000000604482015260640161052d565b80156106de576106de610f72565b61072f846107296007888154811061070657634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160010154600954611cf690919063ffffffff16565b90611d02565b600981905550836007868154811061075757634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160010181905550826007868154811061078e57634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160040160006101000a81548161ffff021916908361ffff16021790555081600786815481106107db57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201600501819055505050505050565b6003546001600160a01b031633146108215760405162461bcd60e51b815260040161052d90612643565b6001600160a01b0381166108925760405162461bcd60e51b815260206004820152603260248201527f5472616e736665724f70657261746f723a206e6577206f70657261746f7220696044820152717320746865207a65726f206164647265737360701b606482015260840161052d565b6003546040516001600160a01b038084169216907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed90600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b60008281526008602090815260408083206001600160a01b03851684529091528120600a544310801590610926575080600301544210155b949350505050565b600260015414156109515760405162461bcd60e51b815260040161052d9061260c565b600260018190555060006007838154811061097c57634e487b7160e01b600052603260045260246000fd5b600091825260208083208684526008909152604083206007909202019250816109a3611cd0565b6001600160a01b03166001600160a01b0316815260200190815260200160002090508281600001541015610a195760405162461bcd60e51b815260206004820181905260248201527f57697468647261773a205573657220616d6f756e74206e6f7420656e6f756768604482015260640161052d565b8282600601541015610a6d5760405162461bcd60e51b815260206004820152601f60248201527f57697468647261773a20506f6f6c20746f74616c206e6f7420656e6f75676800604482015260640161052d565b610a7684610b68565b610a7f84611d0e565b8215610aed578054610a919084611cf6565b81556006820154610aa29084611cf6565b600683015560025482546001600160a01b0390811691161415610ad057600c54610acc9084611cf6565b600c555b610aed610adb611cd0565b83546001600160a01b03169085611eeb565b60038201548154610b0e9164e8d4a5100091610b0891611f53565b90611f5f565b600182015583610b1c611cd0565b6001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56885604051610b5691815260200190565b60405180910390a35050600180555050565b600060078281548110610b8b57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201905080600201544311610bac5750610d9b565b80546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610bef57600080fd5b505afa158015610c03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c27919061245e565b905080610c3b575043600290910155610d9b565b6000610c4b83600201544361111e565b90506000610c78600954610b088660010154610c7260065487611f5390919063ffffffff16565b90611f53565b6002546004549192506001600160a01b03908116916340c10f199116610c9f84600a611f5f565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610ce557600080fd5b505af1158015610cf9573d6000803e3d6000fd5b50506002546040516340c10f1960e01b8152306004820152602481018590526001600160a01b0390911692506340c10f199150604401600060405180830381600087803b158015610d4957600080fd5b505af1158015610d5d573d6000803e3d6000fd5b5050506006850154610d889150610d7d90610b088464e8d4a51000611f53565b600386015490611d02565b6003850155505043600290920191909155505b50565b60026001541415610dc15760405162461bcd60e51b815260040161052d9061260c565b6002600181905550600060078281548110610dec57634e487b7160e01b600052603260045260246000fd5b60009182526020808320858452600890915260408320600790920201925081610e13611cd0565b6001600160a01b0316815260208101919091526040016000208054600684015491925090811115610e975760405162461bcd60e51b815260206004820152602860248201527f456d657267656e637957697468647261773a20506f6f6c20746f74616c206e6f6044820152670e840cadcdeeaced60c31b606482015260840161052d565b6000808355600183018190556002830181905560038301556006830154610ebe9082611cf6565b600684015560025483546001600160a01b0390811691161415610eec57600c54610ee89082611cf6565b600c555b610f09610ef7611cd0565b84546001600160a01b03169083611eeb565b83610f12611cd0565b6001600160a01b03167fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae059583604051610b5691815260200190565b6001600160a01b03811673ea9983bbb6fd1f95cd0a40275c6ac51b56ae6176145b919050565b60075460005b81811015610f9957610f8981610b68565b610f9281612721565b9050610f78565b5050565b610fa5611cd0565b6001600160a01b0316610fc06000546001600160a01b031690565b6001600160a01b031614610fe65760405162461bcd60e51b815260040161052d906125d7565b610ff06000611f6b565b565b6005546001600160a01b0316611006611cd0565b6001600160a01b03161461105c5760405162461bcd60e51b815260206004820152601860248201527f736574466565416464726573733a20464f5242494444454e0000000000000000604482015260640161052d565b6001600160a01b0381166110a85760405162461bcd60e51b8152602060048201526013602482015272736574466565416464726573733a205a45524f60681b604482015260640161052d565b6110b0611cd0565b600554604080516001600160a01b039283168152848316602082015292909116917f6690a53895b5691c039238b384bd857e65c42adcc727775381e02cb90a122613910160405180910390a2600580546001600160a01b0319166001600160a01b0392909216919091179055565b600061112a8284611cf6565b9392505050565b6000806007848154811061115557634e487b7160e01b600052603260045260246000fd5b600091825260208083208784526008825260408085206001600160a01b03898116875293528085206007949094029091016003810154815492516370a0823160e01b815230600482015291965093949291909116906370a082319060240160206040518083038186803b1580156111cb57600080fd5b505afa1580156111df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611203919061245e565b905083600201544311801561121757508015155b1561127757600061122c85600201544361111e565b90506000611253600954610b088860010154610c7260065487611f5390919063ffffffff16565b905061127261126b84610b088464e8d4a51000611f53565b8590611d02565b935050505b60006112a784600101546112a164e8d4a51000610b08878960000154611f5390919063ffffffff16565b90611cf6565b90506112c0846002015482611d0290919063ffffffff16565b98975050505050505050565b6112d4611cd0565b6001600160a01b03166112ef6000546001600160a01b031690565b6001600160a01b0316146113155760405162461bcd60e51b815260040161052d906125d7565b6103e861ffff8416111561136b5760405162461bcd60e51b815260206004820152601960248201527f6164643a206465706f7369742066656520746f6f206869676800000000000000604482015260640161052d565b621275008211156113be5760405162461bcd60e51b815260206004820152601d60248201527f6164643a20696e76616c6964206861727665737420696e74657276616c000000604482015260640161052d565b80156113cc576113cc610f72565b6000600a5443116113df57600a546113e1565b435b6009549091506113f19087611d02565b6009556040805160e0810182526001600160a01b0396871681526020810197885290810191825260006060820181815261ffff9687166080840190815260a0840196875260c08401838152600780546001810182559481905294517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6889490950293840180546001600160a01b03191695909a169490941790985597517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68982015591517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a83015595517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68b82015593517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68c8501805461ffff19169190941617909255517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68d8301555090517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68e90910155565b611588611cd0565b6001600160a01b03166115a36000546001600160a01b031690565b6001600160a01b0316146115c95760405162461bcd60e51b815260040161052d906125d7565b600a54431061161a5760405162461bcd60e51b815260206004820152601b60248201527f4572726f723a3a4661726d207374617274656420616c72656164790000000000604482015260640161052d565b60075460005b818110156116765760006007828154811061164b57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702019050438160020181905550508061166f90612721565b9050611620565b505043600a55565b6003546001600160a01b031633146116a85760405162461bcd60e51b815260040161052d90612643565b80156116b6576116b6610f72565b6116be611cd0565b6001600160a01b03167f802633c8d26237616d81bdac01bc40fcdf36e098832601582ec19d7e431c5ef36007858154811061170957634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016001015484604051611733929190918252602082015260400190565b60405180910390a2611763826107296007868154811061070657634e487b7160e01b600052603260045260246000fd5b600981905550816007848154811061178b57634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160010181905550505050565b6004546001600160a01b03166117b9611cd0565b6001600160a01b03161461180f5760405162461bcd60e51b815260206004820152601860248201527f736574446576416464726573733a20464f5242494444454e0000000000000000604482015260640161052d565b6001600160a01b03811661185b5760405162461bcd60e51b8152602060048201526013602482015272736574446576416464726573733a205a45524f60681b604482015260640161052d565b611863611cd0565b600454604080516001600160a01b039283168152848316602082015292909116917fd36d63f6c513a911d7912853de740af476b0fbb569aa769e1a4f5bfa37a325c4910160405180910390a2600480546001600160a01b0319166001600160a01b0392909216919091179055565b600260015414156118f45760405162461bcd60e51b815260040161052d9061260c565b6002600155600a544310156119615760405162461bcd60e51b815260206004820152602d60248201527f4175726f4469737472696275746f723a2043616e206e6f74206465706f73697460448201526c081899599bdc99481cdd185c9d609a1b606482015260840161052d565b60006007838154811061198457634e487b7160e01b600052603260045260246000fd5b600091825260208083208684526008909152604083206007909202019250816119ab611cd0565b6001600160a01b03166001600160a01b0316815260200190815260200160002090506119d684610b68565b6119df84611d0e565b8215611bb25781546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611a2857600080fd5b505afa158015611a3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a60919061245e565b9050611a80611a6d611cd0565b84546001600160a01b0316903087611fbb565b82546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611ac357600080fd5b505afa158015611ad7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611afb919061245e565b9050611b078183611cf6565b600485015490955061ffff1615611b64576004840154600090611b379061271090610b0890899061ffff16611f53565b6005548654919250611b56916001600160a01b03908116911683611eeb565b611b608682611cf6565b9550505b8254611b709086611d02565b83556006840154611b819086611d02565b600685015560025484546001600160a01b0390811691161415611baf57600c54611bab9086611d02565b600c555b50505b60038201548154611bcd9164e8d4a5100091610b0891611f53565b600182015583611bdb611cd0565b6001600160a01b03167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1585604051610b5691815260200190565b611c1d611cd0565b6001600160a01b0316611c386000546001600160a01b031690565b6001600160a01b031614611c5e5760405162461bcd60e51b815260040161052d906125d7565b6001600160a01b038116611cc35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161052d565b610d9b81611f6b565b3390565b6000611cdb33610f4c565b15611cef575060131936013560601c610500565b5033610500565b600061112a82846126de565b600061112a8284612687565b600060078281548110611d3157634e487b7160e01b600052603260045260246000fd5b60009182526020808320858452600890915260408320600790920201925081611d58611cd0565b6001600160a01b03166001600160a01b03168152602001908152602001600020905080600301546000148015611d905750600a544310155b15611dab576005820154611da5904290611d02565b60038201555b6000611dd982600101546112a164e8d4a51000610b0887600301548760000154611f5390919063ffffffff16565b9050611de7846102f9611cd0565b15611e6f576000811180611dff575060008260020154115b15611e6a576000611e1d836002015483611d0290919063ffffffff16565b9050611e388360020154600b54611cf690919063ffffffff16565b600b55600060028401556005840154611e52904290611d02565b6003840155611e68611e62611cd0565b82611ff3565b505b611ee5565b8015611ee5576002820154611e849082611d02565b6002830155600b54611e969082611d02565b600b5583611ea2611cd0565b6001600160a01b03167fee470483107f579a55c754fa00613c45a9a3b617a418b39cb0be97e5381ba7c183604051611edc91815260200190565b60405180910390a35b50505050565b6040516001600160a01b038316602482015260448101829052611f4e90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261221f565b505050565b600061112a82846126bf565b600061112a828461269f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052611ee59085906323b872dd60e01b90608401611f17565b600c546002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561203957600080fd5b505afa15801561204d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612071919061245e565b1115610f9957600c546002546040516370a0823160e01b81523060048201526000926120fe9290916001600160a01b03909116906370a082319060240160206040518083038186803b1580156120c657600080fd5b505afa1580156120da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a1919061245e565b90508082106121935760025460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b15801561215557600080fd5b505af1158015612169573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218d919061242a565b50611f4e565b8115611f4e5760025460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b1580156121e757600080fd5b505af11580156121fb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee5919061242a565b6000612274826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122f19092919063ffffffff16565b805190915015611f4e5780806020019051810190612292919061242a565b611f4e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161052d565b6060610926848460008585843b61234a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161052d565b600080866001600160a01b031685876040516123669190612588565b60006040518083038185875af1925050503d80600081146123a3576040519150601f19603f3d011682016040523d82523d6000602084013e6123a8565b606091505b50915091506123b88282866123c3565b979650505050505050565b606083156123d257508161112a565b8251156123e25782518084602001fd5b8160405162461bcd60e51b815260040161052d91906125a4565b803561ffff81168114610f6d57600080fd5b60006020828403121561241f578081fd5b813561112a81612752565b60006020828403121561243b578081fd5b815161112a81612767565b600060208284031215612457578081fd5b5035919050565b60006020828403121561246f578081fd5b5051919050565b60008060408385031215612488578081fd5b82359150602083013561249a81612752565b809150509250929050565b600080600080600060a086880312156124bc578081fd5b8535945060208601356124ce81612752565b93506124dc604087016123fc565b92506060860135915060808601356124f381612767565b809150509295509295909350565b60008060408385031215612513578182fd5b50508035926020909101359150565b600080600060608486031215612536578283fd5b8335925060208401359150604084013561254f81612767565b809150509250925092565b600080600080600060a08688031215612571578081fd5b85359450602086013593506124dc604087016123fc565b6000825161259a8184602087016126f5565b9190910192915050565b60006020825282518060208401526125c38160408501602087016126f5565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526024908201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260408201526330ba37b960e11b606082015260800190565b6000821982111561269a5761269a61273c565b500190565b6000826126ba57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156126d9576126d961273c565b500290565b6000828210156126f0576126f061273c565b500390565b60005b838110156127105781810151838201526020016126f8565b83811115611ee55750506000910152565b60006000198214156127355761273561273c565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610d9b57600080fd5b8015158114610d9b57600080fdfea26469706673582212203ea6de5c78412f766e02ac6563c313ffe4624568c5fc7f2efd04f16e4df13c8264736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102065760003560e01c8063630b5ba11161011a578063a1f5a3eb116100ad578063d0d41fe11161007c578063d0d41fe1146104b0578063de73149d146104c3578063e2bbb158146104cd578063e663f31e146104e0578063f2fde38b146104e957610206565b8063a1f5a3eb14610479578063af018de814610482578063afbcfea114610495578063bde4aeca1461049d57610206565b80638da5cb5b116100e95780638da5cb5b146103e25780638dbb1e3a146103f357806393acfc481461040657806393f1a40b1461041957610206565b8063630b5ba1146103a3578063715018a6146103ab578063812c64f1146103b35780638705fcd4146103cf57610206565b80633ad10ef61161019d57806348cd4cb11161016c57806348cd4cb11461035057806351eb05a6146103595780635312ea8e1461036c578063570ca7351461037f578063572b6c051461039057610206565b80633ad10ef61461030e5780634127535814610321578063441a3e7014610334578063474fa6301461034757610206565b80632143e545116101d95780632143e5451461029a57806321dd70e6146102ad57806329605e77146102d85780632e6c998d146102eb57610206565b8063081e3eda1461020b5780630ba84cd2146102265780631526fe271461023b57806317caf6f114610291575b600080fd5b6102136104fc565b6040519081526020015b60405180910390f35b610239610234366004612446565b610503565b005b61024e610249366004612446565b610581565b604080516001600160a01b039098168852602088019690965294860193909352606085019190915261ffff16608084015260a083015260c082015260e00161021d565b61021360095481565b6102396102a836600461255a565b6105de565b6002546102c0906001600160a01b031681565b6040516001600160a01b03909116815260200161021d565b6102396102e636600461240e565b6107f7565b6102fe6102f9366004612476565b6108ee565b604051901515815260200161021d565b6004546102c0906001600160a01b031681565b6005546102c0906001600160a01b031681565b610239610342366004612501565b61092e565b610213600b5481565b610213600a5481565b610239610367366004612446565b610b68565b61023961037a366004612446565b610d9e565b6003546001600160a01b03166102c0565b6102fe61039e36600461240e565b610f4c565b610239610f72565b610239610f9d565b6103bc6103e881565b60405161ffff909116815260200161021d565b6102396103dd36600461240e565b610ff2565b6000546001600160a01b03166102c0565b610213610401366004612501565b61111e565b610213610414366004612476565b611131565b610459610427366004612476565b600860209081526000928352604080842090915290825290208054600182015460028301546003909301549192909184565b60408051948552602085019390935291830152606082015260800161021d565b610213600c5481565b6102396104903660046124a5565b6112cc565b610239611580565b6102396104ab366004612522565b61167e565b6102396104be36600461240e565b6117a5565b6102136212750081565b6102396104db366004612501565b6118d1565b61021360065481565b6102396104f736600461240e565b611c15565b6007545b90565b6003546001600160a01b031633146105365760405162461bcd60e51b815260040161052d90612643565b60405180910390fd5b61053e610f72565b600654604080519182526020820183905233917feedc6338c9c1ad8f3cd6c90dd09dbe98dbd57e610d3e59a17996d07acb0d9511910160405180910390a2600655565b6007818154811061059157600080fd5b600091825260209091206007909102018054600182015460028301546003840154600485015460058601546006909601546001600160a01b03909516965092949193909261ffff16919087565b6105e6611cd0565b6001600160a01b03166106016000546001600160a01b031690565b6001600160a01b0316146106275760405162461bcd60e51b815260040161052d906125d7565b6103e861ffff8416111561067d5760405162461bcd60e51b815260206004820152601960248201527f7365743a206465706f7369742066656520746f6f206869676800000000000000604482015260640161052d565b621275008211156106d05760405162461bcd60e51b815260206004820152601d60248201527f7365743a20696e76616c6964206861727665737420696e74657276616c000000604482015260640161052d565b80156106de576106de610f72565b61072f846107296007888154811061070657634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160010154600954611cf690919063ffffffff16565b90611d02565b600981905550836007868154811061075757634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160010181905550826007868154811061078e57634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160040160006101000a81548161ffff021916908361ffff16021790555081600786815481106107db57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201600501819055505050505050565b6003546001600160a01b031633146108215760405162461bcd60e51b815260040161052d90612643565b6001600160a01b0381166108925760405162461bcd60e51b815260206004820152603260248201527f5472616e736665724f70657261746f723a206e6577206f70657261746f7220696044820152717320746865207a65726f206164647265737360701b606482015260840161052d565b6003546040516001600160a01b038084169216907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed90600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b60008281526008602090815260408083206001600160a01b03851684529091528120600a544310801590610926575080600301544210155b949350505050565b600260015414156109515760405162461bcd60e51b815260040161052d9061260c565b600260018190555060006007838154811061097c57634e487b7160e01b600052603260045260246000fd5b600091825260208083208684526008909152604083206007909202019250816109a3611cd0565b6001600160a01b03166001600160a01b0316815260200190815260200160002090508281600001541015610a195760405162461bcd60e51b815260206004820181905260248201527f57697468647261773a205573657220616d6f756e74206e6f7420656e6f756768604482015260640161052d565b8282600601541015610a6d5760405162461bcd60e51b815260206004820152601f60248201527f57697468647261773a20506f6f6c20746f74616c206e6f7420656e6f75676800604482015260640161052d565b610a7684610b68565b610a7f84611d0e565b8215610aed578054610a919084611cf6565b81556006820154610aa29084611cf6565b600683015560025482546001600160a01b0390811691161415610ad057600c54610acc9084611cf6565b600c555b610aed610adb611cd0565b83546001600160a01b03169085611eeb565b60038201548154610b0e9164e8d4a5100091610b0891611f53565b90611f5f565b600182015583610b1c611cd0565b6001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56885604051610b5691815260200190565b60405180910390a35050600180555050565b600060078281548110610b8b57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201905080600201544311610bac5750610d9b565b80546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610bef57600080fd5b505afa158015610c03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c27919061245e565b905080610c3b575043600290910155610d9b565b6000610c4b83600201544361111e565b90506000610c78600954610b088660010154610c7260065487611f5390919063ffffffff16565b90611f53565b6002546004549192506001600160a01b03908116916340c10f199116610c9f84600a611f5f565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610ce557600080fd5b505af1158015610cf9573d6000803e3d6000fd5b50506002546040516340c10f1960e01b8152306004820152602481018590526001600160a01b0390911692506340c10f199150604401600060405180830381600087803b158015610d4957600080fd5b505af1158015610d5d573d6000803e3d6000fd5b5050506006850154610d889150610d7d90610b088464e8d4a51000611f53565b600386015490611d02565b6003850155505043600290920191909155505b50565b60026001541415610dc15760405162461bcd60e51b815260040161052d9061260c565b6002600181905550600060078281548110610dec57634e487b7160e01b600052603260045260246000fd5b60009182526020808320858452600890915260408320600790920201925081610e13611cd0565b6001600160a01b0316815260208101919091526040016000208054600684015491925090811115610e975760405162461bcd60e51b815260206004820152602860248201527f456d657267656e637957697468647261773a20506f6f6c20746f74616c206e6f6044820152670e840cadcdeeaced60c31b606482015260840161052d565b6000808355600183018190556002830181905560038301556006830154610ebe9082611cf6565b600684015560025483546001600160a01b0390811691161415610eec57600c54610ee89082611cf6565b600c555b610f09610ef7611cd0565b84546001600160a01b03169083611eeb565b83610f12611cd0565b6001600160a01b03167fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae059583604051610b5691815260200190565b6001600160a01b03811673ea9983bbb6fd1f95cd0a40275c6ac51b56ae6176145b919050565b60075460005b81811015610f9957610f8981610b68565b610f9281612721565b9050610f78565b5050565b610fa5611cd0565b6001600160a01b0316610fc06000546001600160a01b031690565b6001600160a01b031614610fe65760405162461bcd60e51b815260040161052d906125d7565b610ff06000611f6b565b565b6005546001600160a01b0316611006611cd0565b6001600160a01b03161461105c5760405162461bcd60e51b815260206004820152601860248201527f736574466565416464726573733a20464f5242494444454e0000000000000000604482015260640161052d565b6001600160a01b0381166110a85760405162461bcd60e51b8152602060048201526013602482015272736574466565416464726573733a205a45524f60681b604482015260640161052d565b6110b0611cd0565b600554604080516001600160a01b039283168152848316602082015292909116917f6690a53895b5691c039238b384bd857e65c42adcc727775381e02cb90a122613910160405180910390a2600580546001600160a01b0319166001600160a01b0392909216919091179055565b600061112a8284611cf6565b9392505050565b6000806007848154811061115557634e487b7160e01b600052603260045260246000fd5b600091825260208083208784526008825260408085206001600160a01b03898116875293528085206007949094029091016003810154815492516370a0823160e01b815230600482015291965093949291909116906370a082319060240160206040518083038186803b1580156111cb57600080fd5b505afa1580156111df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611203919061245e565b905083600201544311801561121757508015155b1561127757600061122c85600201544361111e565b90506000611253600954610b088860010154610c7260065487611f5390919063ffffffff16565b905061127261126b84610b088464e8d4a51000611f53565b8590611d02565b935050505b60006112a784600101546112a164e8d4a51000610b08878960000154611f5390919063ffffffff16565b90611cf6565b90506112c0846002015482611d0290919063ffffffff16565b98975050505050505050565b6112d4611cd0565b6001600160a01b03166112ef6000546001600160a01b031690565b6001600160a01b0316146113155760405162461bcd60e51b815260040161052d906125d7565b6103e861ffff8416111561136b5760405162461bcd60e51b815260206004820152601960248201527f6164643a206465706f7369742066656520746f6f206869676800000000000000604482015260640161052d565b621275008211156113be5760405162461bcd60e51b815260206004820152601d60248201527f6164643a20696e76616c6964206861727665737420696e74657276616c000000604482015260640161052d565b80156113cc576113cc610f72565b6000600a5443116113df57600a546113e1565b435b6009549091506113f19087611d02565b6009556040805160e0810182526001600160a01b0396871681526020810197885290810191825260006060820181815261ffff9687166080840190815260a0840196875260c08401838152600780546001810182559481905294517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6889490950293840180546001600160a01b03191695909a169490941790985597517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68982015591517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a83015595517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68b82015593517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68c8501805461ffff19169190941617909255517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68d8301555090517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68e90910155565b611588611cd0565b6001600160a01b03166115a36000546001600160a01b031690565b6001600160a01b0316146115c95760405162461bcd60e51b815260040161052d906125d7565b600a54431061161a5760405162461bcd60e51b815260206004820152601b60248201527f4572726f723a3a4661726d207374617274656420616c72656164790000000000604482015260640161052d565b60075460005b818110156116765760006007828154811061164b57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702019050438160020181905550508061166f90612721565b9050611620565b505043600a55565b6003546001600160a01b031633146116a85760405162461bcd60e51b815260040161052d90612643565b80156116b6576116b6610f72565b6116be611cd0565b6001600160a01b03167f802633c8d26237616d81bdac01bc40fcdf36e098832601582ec19d7e431c5ef36007858154811061170957634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016001015484604051611733929190918252602082015260400190565b60405180910390a2611763826107296007868154811061070657634e487b7160e01b600052603260045260246000fd5b600981905550816007848154811061178b57634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160010181905550505050565b6004546001600160a01b03166117b9611cd0565b6001600160a01b03161461180f5760405162461bcd60e51b815260206004820152601860248201527f736574446576416464726573733a20464f5242494444454e0000000000000000604482015260640161052d565b6001600160a01b03811661185b5760405162461bcd60e51b8152602060048201526013602482015272736574446576416464726573733a205a45524f60681b604482015260640161052d565b611863611cd0565b600454604080516001600160a01b039283168152848316602082015292909116917fd36d63f6c513a911d7912853de740af476b0fbb569aa769e1a4f5bfa37a325c4910160405180910390a2600480546001600160a01b0319166001600160a01b0392909216919091179055565b600260015414156118f45760405162461bcd60e51b815260040161052d9061260c565b6002600155600a544310156119615760405162461bcd60e51b815260206004820152602d60248201527f4175726f4469737472696275746f723a2043616e206e6f74206465706f73697460448201526c081899599bdc99481cdd185c9d609a1b606482015260840161052d565b60006007838154811061198457634e487b7160e01b600052603260045260246000fd5b600091825260208083208684526008909152604083206007909202019250816119ab611cd0565b6001600160a01b03166001600160a01b0316815260200190815260200160002090506119d684610b68565b6119df84611d0e565b8215611bb25781546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611a2857600080fd5b505afa158015611a3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a60919061245e565b9050611a80611a6d611cd0565b84546001600160a01b0316903087611fbb565b82546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611ac357600080fd5b505afa158015611ad7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611afb919061245e565b9050611b078183611cf6565b600485015490955061ffff1615611b64576004840154600090611b379061271090610b0890899061ffff16611f53565b6005548654919250611b56916001600160a01b03908116911683611eeb565b611b608682611cf6565b9550505b8254611b709086611d02565b83556006840154611b819086611d02565b600685015560025484546001600160a01b0390811691161415611baf57600c54611bab9086611d02565b600c555b50505b60038201548154611bcd9164e8d4a5100091610b0891611f53565b600182015583611bdb611cd0565b6001600160a01b03167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1585604051610b5691815260200190565b611c1d611cd0565b6001600160a01b0316611c386000546001600160a01b031690565b6001600160a01b031614611c5e5760405162461bcd60e51b815260040161052d906125d7565b6001600160a01b038116611cc35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161052d565b610d9b81611f6b565b3390565b6000611cdb33610f4c565b15611cef575060131936013560601c610500565b5033610500565b600061112a82846126de565b600061112a8284612687565b600060078281548110611d3157634e487b7160e01b600052603260045260246000fd5b60009182526020808320858452600890915260408320600790920201925081611d58611cd0565b6001600160a01b03166001600160a01b03168152602001908152602001600020905080600301546000148015611d905750600a544310155b15611dab576005820154611da5904290611d02565b60038201555b6000611dd982600101546112a164e8d4a51000610b0887600301548760000154611f5390919063ffffffff16565b9050611de7846102f9611cd0565b15611e6f576000811180611dff575060008260020154115b15611e6a576000611e1d836002015483611d0290919063ffffffff16565b9050611e388360020154600b54611cf690919063ffffffff16565b600b55600060028401556005840154611e52904290611d02565b6003840155611e68611e62611cd0565b82611ff3565b505b611ee5565b8015611ee5576002820154611e849082611d02565b6002830155600b54611e969082611d02565b600b5583611ea2611cd0565b6001600160a01b03167fee470483107f579a55c754fa00613c45a9a3b617a418b39cb0be97e5381ba7c183604051611edc91815260200190565b60405180910390a35b50505050565b6040516001600160a01b038316602482015260448101829052611f4e90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261221f565b505050565b600061112a82846126bf565b600061112a828461269f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052611ee59085906323b872dd60e01b90608401611f17565b600c546002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561203957600080fd5b505afa15801561204d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612071919061245e565b1115610f9957600c546002546040516370a0823160e01b81523060048201526000926120fe9290916001600160a01b03909116906370a082319060240160206040518083038186803b1580156120c657600080fd5b505afa1580156120da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a1919061245e565b90508082106121935760025460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b15801561215557600080fd5b505af1158015612169573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218d919061242a565b50611f4e565b8115611f4e5760025460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b1580156121e757600080fd5b505af11580156121fb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee5919061242a565b6000612274826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122f19092919063ffffffff16565b805190915015611f4e5780806020019051810190612292919061242a565b611f4e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161052d565b6060610926848460008585843b61234a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161052d565b600080866001600160a01b031685876040516123669190612588565b60006040518083038185875af1925050503d80600081146123a3576040519150601f19603f3d011682016040523d82523d6000602084013e6123a8565b606091505b50915091506123b88282866123c3565b979650505050505050565b606083156123d257508161112a565b8251156123e25782518084602001fd5b8160405162461bcd60e51b815260040161052d91906125a4565b803561ffff81168114610f6d57600080fd5b60006020828403121561241f578081fd5b813561112a81612752565b60006020828403121561243b578081fd5b815161112a81612767565b600060208284031215612457578081fd5b5035919050565b60006020828403121561246f578081fd5b5051919050565b60008060408385031215612488578081fd5b82359150602083013561249a81612752565b809150509250929050565b600080600080600060a086880312156124bc578081fd5b8535945060208601356124ce81612752565b93506124dc604087016123fc565b92506060860135915060808601356124f381612767565b809150509295509295909350565b60008060408385031215612513578182fd5b50508035926020909101359150565b600080600060608486031215612536578283fd5b8335925060208401359150604084013561254f81612767565b809150509250925092565b600080600080600060a08688031215612571578081fd5b85359450602086013593506124dc604087016123fc565b6000825161259a8184602087016126f5565b9190910192915050565b60006020825282518060208401526125c38160408501602087016126f5565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526024908201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260408201526330ba37b960e11b606082015260800190565b6000821982111561269a5761269a61273c565b500190565b6000826126ba57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156126d9576126d961273c565b500290565b6000828210156126f0576126f061273c565b500390565b60005b838110156127105781810151838201526020016126f8565b83811115611ee55750506000910152565b60006000198214156127355761273561273c565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610d9b57600080fd5b8015158114610d9b57600080fdfea26469706673582212203ea6de5c78412f766e02ac6563c313ffe4624568c5fc7f2efd04f16e4df13c8264736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 375,
        "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 650,
        "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3358,
        "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
        "label": "auro",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IAuroERC20)4889"
      },
      {
        "astId": 3360,
        "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
        "label": "_operator",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3362,
        "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
        "label": "devAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 3364,
        "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
        "label": "feeAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3366,
        "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
        "label": "auroPerBlock",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3376,
        "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
        "label": "poolInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(PoolInfo)3355_storage)dyn_storage"
      },
      {
        "astId": 3383,
        "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
        "label": "userInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3339_storage))"
      },
      {
        "astId": 3386,
        "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3388,
        "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
        "label": "startBlock",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3390,
        "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
        "label": "totalLockedUpRewards",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3393,
        "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
        "label": "totalAuroInPools",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)3355_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)3355_storage",
        "encoding": "dynamic_array",
        "label": "struct AuroDistributor.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_contract(IAuroERC20)4889": {
        "encoding": "inplace",
        "label": "contract IAuroERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1303": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)3339_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AuroDistributor.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)3339_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3339_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct AuroDistributor.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)3339_storage)"
      },
      "t_struct(PoolInfo)3355_storage": {
        "encoding": "inplace",
        "label": "struct AuroDistributor.PoolInfo",
        "members": [
          {
            "astId": 3342,
            "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1303"
          },
          {
            "astId": 3344,
            "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3346,
            "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3348,
            "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
            "label": "accAuroPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3350,
            "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
            "label": "depositFeeBP",
            "offset": 0,
            "slot": "4",
            "type": "t_uint16"
          },
          {
            "astId": 3352,
            "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
            "label": "harvestInterval",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3354,
            "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
            "label": "totalLp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(UserInfo)3339_storage": {
        "encoding": "inplace",
        "label": "struct AuroDistributor.UserInfo",
        "members": [
          {
            "astId": 3332,
            "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3334,
            "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3336,
            "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
            "label": "rewardLockedUp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3338,
            "contract": "contracts/farm/AuroDistributor.sol:AuroDistributor",
            "label": "nextHarvestUntil",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}