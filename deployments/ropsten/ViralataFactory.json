{
  "address": "0x7999D1Ee8F4fAfcdFe22Ca7cDA9C388dfd7CeB3d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INIT_CODE_PAIR_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_migrator",
          "type": "address"
        }
      ],
      "name": "setMigrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x473668dce29576ee115a0b606bb812a032608988d9519bcf565c8948e5553b48",
  "receipt": {
    "to": null,
    "from": "0xeAD468684102da07294006F96376FF78b760C9BD",
    "contractAddress": "0x7999D1Ee8F4fAfcdFe22Ca7cDA9C388dfd7CeB3d",
    "transactionIndex": 6,
    "gasUsed": "2615460",
    "logsBloom": "0x
    "blockHash": "0xdf7b17bb9b104bf1d5cde8ecd80d68b7b51553fc90f1f108561d9f761eb43f4e",
    "transactionHash": "0x473668dce29576ee115a0b606bb812a032608988d9519bcf565c8948e5553b48",
    "logs": [],
    "blockNumber": 10797844,
    "cumulativeGasUsed": "3038817",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8dCfDe0B1bF39451882f5cc958609c74Ef50A96c"
  ],
  "solcInputHash": "be49c356cd546b3773b42f5b8f5f7f18",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INIT_CODE_PAIR_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/uniswapv2/ViralataFactory.sol\":\"ViralataFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/uniswapv2/ViralataERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.6.12;\\n\\nimport './libraries/SafeMath.sol';\\n\\ncontract ViralataERC20 {\\n    using SafeMathViralata for uint;\\n\\n    string public constant name = 'ViralataSwap LP Token';\\n    string public constant symbol = 'VLP';\\n    uint8 public constant decimals = 18;\\n    uint  public totalSupply;\\n    mapping(address => uint) public balanceOf;\\n    mapping(address => mapping(address => uint)) public allowance;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint) public nonces;\\n\\n    address private _trustedForwarder; // remember to change before deploying\\n\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    constructor() public {\\n        uint chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                keccak256(bytes(name)),\\n                keccak256(bytes('1')),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n\\n    function _mint(address to, uint value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(address owner, address spender, uint value) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(address from, address to, uint value) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint value) external returns (bool) {\\n        _approve(_msgSender(), spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint value) external returns (bool) {\\n        _transfer(_msgSender(), to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint value) external returns (bool) {\\n        if (allowance[from][_msgSender()] != uint(-1)) {\\n            allowance[from][_msgSender()] = allowance[from][_msgSender()].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, 'ViralataSwap: EXPIRED');\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                '\\\\x19\\\\x01',\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'ViralataSwap: INVALID_SIGNATURE');\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0x9d776158cc2c26a2e0e425b1c6fa18c29b4462e5f74375babb71f60712eb12f8\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/ViralataFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.6.12;\\n\\nimport './interfaces/IViralataFactory.sol';\\nimport './ViralataPair.sol';\\n\\ncontract ViralataFactory is IViralataFactory {\\n    bytes32 public constant INIT_CODE_PAIR_HASH = keccak256(abi.encodePacked(type(ViralataPair).creationCode));\\n\\n    address public override feeTo;\\n    address public override feeToSetter;\\n    address public override migrator;\\n\\n    mapping(address => mapping(address => address)) public override getPair;\\n    address[] public override allPairs;\\n\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    constructor(address _feeToSetter) public {\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function allPairsLength() external override view returns (uint) {\\n        return allPairs.length;\\n    }\\n\\n    function createPair(address tokenA, address tokenB) external override returns (address pair) {\\n        require(tokenA != tokenB, 'ViralataSwap: IDENTICAL_ADDRESSES');\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'ViralataSwap: ZERO_ADDRESS');\\n        require(getPair[token0][token1] == address(0), 'ViralataSwap: PAIR_EXISTS'); // single check is sufficient\\n        bytes memory bytecode = type(ViralataPair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        ViralataPair(pair).initialize(token0, token1);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external override {\\n        require(msg.sender == feeToSetter, 'ViralataSwap: FORBIDDEN');\\n        feeTo = _feeTo;\\n    }\\n\\n    function setMigrator(address _migrator) external override {\\n        require(msg.sender == feeToSetter, 'ViralataSwap: FORBIDDEN');\\n        migrator = _migrator;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external override {\\n        require(msg.sender == feeToSetter, 'ViralataSwap: FORBIDDEN');\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x73ca6aec007131e3d8efc46069b6bb0b9b4f6f14ab95255af949f3a62642e8bd\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/ViralataPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.6.12;\\n\\nimport './ViralataERC20.sol';\\nimport './libraries/Math.sol';\\nimport './libraries/UQ112x112.sol';\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/IViralataFactory.sol';\\nimport './interfaces/IViralataCallee.sol';\\n\\ninterface IMigrator {\\n    // Return the desired amount of liquidity token that the migrator wants.\\n    function desiredLiquidity() external view returns (uint256);\\n}\\n\\ncontract ViralataPair is ViralataERC20 {\\n    using SafeMathViralata for uint;\\n    using UQ112x112 for uint224;\\n\\n    uint public constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\n\\n    address public factory;\\n    address public token0;\\n    address public token1;\\n\\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    uint public price0CumulativeLast;\\n    uint public price1CumulativeLast;\\n    uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\n    uint private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, 'ViralataSwap: LOCKED');\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _safeTransfer(address token, address to, uint value) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ViralataSwap: TRANSFER_FAILED');\\n    }\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    constructor() public {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _token1) external {\\n        require(msg.sender == factory, 'ViralataSwap: FORBIDDEN'); // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'ViralataSwap: OVERFLOW');\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\n        address feeTo = IViralataFactory(factory).feeTo();\\n        feeOn = feeTo != address(0);\\n        uint _kLast = kLast; // gas savings\\n        if (feeOn) {\\n            if (_kLast != 0) {\\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\\n                uint rootKLast = Math.sqrt(_kLast);\\n                if (rootK > rootKLast) {\\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\\n                    // multiply by 0 in denominator to capture all fees\\n                    // mul operation is kept for consistency with legacy code\\n                    uint denominator = rootK.mul(0).add(rootKLast);\\n                    uint liquidity = numerator / denominator;\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\n                }\\n            }\\n        } else if (_kLast != 0) {\\n            kLast = 0;\\n        }\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external lock returns (uint liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        uint balance0 = IERC20Viralata(token0).balanceOf(address(this));\\n        uint balance1 = IERC20Viralata(token1).balanceOf(address(this));\\n        uint amount0 = balance0.sub(_reserve0);\\n        uint amount1 = balance1.sub(_reserve1);\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            address migrator = IViralataFactory(factory).migrator();\\n            if (_msgSender() == migrator) {\\n                liquidity = IMigrator(migrator).desiredLiquidity();\\n                require(liquidity > 0 && liquidity != uint256(-1), \\\"Bad desired liquidity\\\");\\n            } else {\\n                require(migrator == address(0), \\\"Must not have migrator\\\");\\n                liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n                _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n            }\\n        } else {\\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, 'ViralataSwap: INSUFFICIENT_LIQUIDITY_MINTED');\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Mint(_msgSender(), amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to) external lock returns (uint amount0, uint amount1) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        address _token0 = token0;                                // gas savings\\n        address _token1 = token1;                                // gas savings\\n        uint balance0 = IERC20Viralata(_token0).balanceOf(address(this));\\n        uint balance1 = IERC20Viralata(_token1).balanceOf(address(this));\\n        uint liquidity = balanceOf[address(this)];\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, 'ViralataSwap: INSUFFICIENT_LIQUIDITY_BURNED');\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20Viralata(_token0).balanceOf(address(this));\\n        balance1 = IERC20Viralata(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Burn(_msgSender(), amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\\n        require(amount0Out > 0 || amount1Out > 0, 'ViralataSwap: INSUFFICIENT_OUTPUT_AMOUNT');\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'ViralataSwap: INSUFFICIENT_LIQUIDITY');\\n\\n        uint balance0;\\n        uint balance1;\\n        { // scope for _token{0,1}, avoids stack too deep errors\\n        address _token0 = token0;\\n        address _token1 = token1;\\n        require(to != _token0 && to != _token1, 'ViralataSwap: INVALID_TO');\\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n        if (data.length > 0) IViralataCallee(to).uniswapV2Call(_msgSender(), amount0Out, amount1Out, data);\\n        balance0 = IERC20Viralata(_token0).balanceOf(address(this));\\n        balance1 = IERC20Viralata(_token1).balanceOf(address(this));\\n        }\\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n        require(amount0In > 0 || amount1In > 0, 'ViralataSwap: INSUFFICIENT_INPUT_AMOUNT');\\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n        uint balance0Adjusted = balance0.mul(10000).sub(amount0In.mul(25));\\n        uint balance1Adjusted = balance1.mul(10000).sub(amount1In.mul(25));\\n        require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(10000**2), 'ViralataSwap: K');\\n        }\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(_msgSender(), amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(_token0, to, IERC20Viralata(_token0).balanceOf(address(this)).sub(reserve0));\\n        _safeTransfer(_token1, to, IERC20Viralata(_token1).balanceOf(address(this)).sub(reserve1));\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(IERC20Viralata(token0).balanceOf(address(this)), IERC20Viralata(token1).balanceOf(address(this)), reserve0, reserve1);\\n    }\\n}\",\"keccak256\":\"0xd0999e0f492e95f99dae9cbeb8a3d8a08e29c70449aafcf52f934f9041dce248\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IERC20Viralata {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xb2a60b4fdbe94e11ab3b6066205150af813493f5a2b95fa85fb3553d4d042c73\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/interfaces/IViralataCallee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IViralataCallee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xe3cb96fa204975b3345b00980da570c6ae6e4087c4e6a39dc558f33cfe3ab776\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/interfaces/IViralataFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IViralataFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0x1f854e854acf797b611ba80e7cc2714f2b4cf10e368661a03f52f007fb8669f3\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.6.12;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e0a5520297ed1dc711407fb10e309db409fc8143e19a0a7751aa064bb99dfa1\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.6.12;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMathViralata {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n}\\n\",\"keccak256\":\"0xd04d92c9641003e67dabb09d448f0bfcfc1b1a7a8ccfde00b9b7e239daf1f402\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/libraries/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.6.12;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0xc4574ee73aa220d7a8b363ef7c874c099b6007b0f30365993e758c8337a294d8\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051612e4f380380612e4f8339818101604052602081101561003357600080fd5b5051600180546001600160a01b0319166001600160a01b03909216919091179055612dec806100636000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80635855a25a116100715780635855a25a146101395780637cd07e4714610141578063a2e74af614610149578063c9c653961461016f578063e6a439051461019d578063f46901ed146101cb576100a9565b8063017e7e58146100ae578063094b7415146100d25780631e3dd18b146100da57806323cf3118146100f7578063574f2ba31461011f575b600080fd5b6100b66101f1565b604080516001600160a01b039092168252519081900360200190f35b6100b6610200565b6100b6600480360360208110156100f057600080fd5b503561020f565b61011d6004803603602081101561010d57600080fd5b50356001600160a01b0316610236565b005b6101276102b1565b60408051918252519081900360200190f35b6101276102b7565b6100b661034a565b61011d6004803603602081101561015f57600080fd5b50356001600160a01b0316610359565b6100b66004803603604081101561018557600080fd5b506001600160a01b03813581169160200135166103d4565b6100b6600480360360408110156101b357600080fd5b506001600160a01b03813581169160200135166106f0565b61011d600480360360208110156101e157600080fd5b50356001600160a01b0316610716565b6000546001600160a01b031681565b6001546001600160a01b031681565b6004818154811061021c57fe5b6000918252602090912001546001600160a01b0316905081565b6001546001600160a01b0316331461028f576040805162461bcd60e51b81526020600482015260176024820152762b34b930b630ba30a9bbb0b81d102327a92124a22222a760491b604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60045490565b6040516102c660208201610791565b6020820181038252601f19601f820116604052506040516020018082805190602001908083835b6020831061030c5780518252601f1990920191602091820191016102ed565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012081565b6002546001600160a01b031681565b6001546001600160a01b031633146103b2576040805162461bcd60e51b81526020600482015260176024820152762b34b930b630ba30a9bbb0b81d102327a92124a22222a760491b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b031614156104275760405162461bcd60e51b8152600401808060200182810382526021815260200180612d966021913960400191505060405180910390fd5b600080836001600160a01b0316856001600160a01b03161061044a57838561044d565b84845b90925090506001600160a01b0382166104ad576040805162461bcd60e51b815260206004820152601a60248201527f566972616c617461537761703a205a45524f5f41444452455353000000000000604482015290519081900360640190fd5b6001600160a01b03828116600090815260036020908152604080832085851684529091529020541615610527576040805162461bcd60e51b815260206004820152601960248201527f566972616c617461537761703a20504149525f45584953545300000000000000604482015290519081900360640190fd5b60606040518060200161053990610791565b6020820181038252601f19601f8201166040525090506000838360405160200180836001600160a01b031660601b8152601401826001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f59450846001600160a01b031663485cc95585856040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b0316815260200192505050600060405180830381600087803b15801561060657600080fd5b505af115801561061a573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526003602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560048054600181018255958190527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b60036020908152600092835260408084209091529082529020546001600160a01b031681565b6001546001600160a01b0316331461076f576040805162461bcd60e51b81526020600482015260176024820152762b34b930b630ba30a9bbb0b81d102327a92124a22222a760491b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6125f78061079f8339019056fe60806040526001600d5534801561001557600080fd5b50604080518082018252601581527f566972616c61746153776170204c5020546f6b656e00000000000000000000006020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f74395e1e6331e722a2daafb6a053df80b7ff71036f1a18db088bab1d965fe5db818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600680546001600160a01b031916331790556124dc8061011b6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80636a627842116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a714610575578063d505accf1461057d578063dd62ed3e146105ce578063fff6cae9146105fc576101c4565b8063ba9a7a561461053f578063bc25cf7714610547578063c45a01551461056d576101c4565b80637ecebe00116100d35780637ecebe00146104a657806389afcb44146104cc57806395d89b411461050b578063a9059cbb14610513576101c4565b80636a6278421461045257806370a08231146104785780637464fc3d1461049e576101c4565b806330adf81f11610166578063485cc95511610140578063485cc955146103ee578063572b6c051461041c5780635909c0d5146104425780635a3d54931461044a576101c4565b806330adf81f146103c0578063313ce567146103c85780633644e515146103e6576101c4565b8063095ea7b3116101a2578063095ea7b31461030c5780630dfe16811461034c57806318160ddd1461037057806323b872dd1461038a576101c4565b8063022c0d9f146101c957806306fdde03146102575780630902f1ac146102d4575b600080fd5b610255600480360360808110156101df57600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561021657600080fd5b82018360208201111561022857600080fd5b8035906020019184600183028401116401000000008311171561024a57600080fd5b509092509050610604565b005b61025f610b34565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610299578181015183820152602001610281565b50505050905090810190601f1680156102c65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102dc610b65565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103386004803603604081101561032257600080fd5b506001600160a01b038135169060200135610b8f565b604080519115158252519081900360200190f35b610354610bad565b604080516001600160a01b039092168252519081900360200190f35b610378610bbc565b60408051918252519081900360200190f35b610338600480360360608110156103a057600080fd5b506001600160a01b03813581169160208101359091169060400135610bc2565b610378610ca5565b6103d0610cc9565b6040805160ff9092168252519081900360200190f35b610378610cce565b6102556004803603604081101561040457600080fd5b506001600160a01b0381358116916020013516610cd4565b6103386004803603602081101561043257600080fd5b50356001600160a01b0316610d61565b610378610d78565b610378610d7e565b6103786004803603602081101561046857600080fd5b50356001600160a01b0316610d84565b6103786004803603602081101561048e57600080fd5b50356001600160a01b0316611229565b61037861123b565b610378600480360360208110156104bc57600080fd5b50356001600160a01b0316611241565b6104f2600480360360208110156104e257600080fd5b50356001600160a01b0316611253565b6040805192835260208301919091528051918290030190f35b61025f6115fc565b6103386004803603604081101561052957600080fd5b506001600160a01b03813516906020013561161b565b61037861162f565b6102556004803603602081101561055d57600080fd5b50356001600160a01b0316611635565b6103546117aa565b6103546117b9565b610255600480360360e081101561059357600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c001356117c8565b610378600480360360408110156105e457600080fd5b506001600160a01b03813581169160200135166119cd565b6102556119ea565b600d54600114610652576040805162461bcd60e51b8152602060048201526014602482015273159a5c985b185d1854ddd85c0e881313d0d2d15160621b604482015290519081900360640190fd5b6000600d55841515806106655750600084115b6106a05760405162461bcd60e51b81526004018080602001828103825260288152602001806124096028913960400191505060405180910390fd5b6000806106ab610b65565b5091509150816001600160701b0316871080156106d05750806001600160701b031686105b61070b5760405162461bcd60e51b81526004018080602001828103825260248152602001806124836024913960400191505060405180910390fd5b60075460085460009182916001600160a01b039182169190811690891682148015906107495750806001600160a01b0316896001600160a01b031614155b61079a576040805162461bcd60e51b815260206004820152601860248201527f566972616c617461537761703a20494e56414c49445f544f0000000000000000604482015290519081900360640190fd5b8a156107ab576107ab828a8d611b4f565b89156107bc576107bc818a8c611b4f565b861561087557886001600160a01b03166310d1e85c6107d9611ce9565b8d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561085c57600080fd5b505af1158015610870573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156108bb57600080fd5b505afa1580156108cf573d6000803e3d6000fd5b505050506040513d60208110156108e557600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b15801561093157600080fd5b505afa158015610945573d6000803e3d6000fd5b505050506040513d602081101561095b57600080fd5b5051925060009150506001600160701b0385168a9003831161097e57600061098d565b89856001600160701b03160383035b9050600089856001600160701b03160383116109aa5760006109b9565b89856001600160701b03160383035b905060008211806109ca5750600081115b610a055760405162461bcd60e51b815260040180806020018281038252602781526020018061245c6027913960400191505060405180910390fd5b6000610a27610a15846019611d0e565b610a2187612710611d0e565b90611d71565b90506000610a39610a15846019611d0e565b9050610a5f6305f5e100610a596001600160701b038b8116908b16611d0e565b90611d0e565b610a698383611d0e565b1015610aae576040805162461bcd60e51b815260206004820152600f60248201526e566972616c617461537761703a204b60881b604482015290519081900360640190fd5b5050610abc84848888611dc1565b886001600160a01b0316610ace611ce9565b60408051858152602081018590528082018f9052606081018e905290516001600160a01b0392909216917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600d55505050505050505050565b604051806040016040528060158152602001742b34b930b630ba30a9bbb0b8102628102a37b5b2b760591b81525081565b6009546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610ba3610b9c611ce9565b8484611f83565b5060015b92915050565b6007546001600160a01b031681565b60005481565b6001600160a01b03831660009081526002602052604081206000199082610be7611ce9565b6001600160a01b03166001600160a01b031681526020019081526020016000205414610c90576001600160a01b0384166000908152600260205260408120610c5491849190610c34611ce9565b6001600160a01b0316815260208101919091526040016000205490611d71565b6001600160a01b038516600090815260026020526040812090610c75611ce9565b6001600160a01b031681526020810191909152604001600020555b610c9b848484611fe5565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6006546001600160a01b03163314610d33576040805162461bcd60e51b815260206004820152601760248201527f566972616c617461537761703a20464f5242494444454e000000000000000000604482015290519081900360640190fd5b600780546001600160a01b039384166001600160a01b03199182161790915560088054929093169116179055565b6005546001600160a01b038281169116145b919050565b600a5481565b600b5481565b6000600d54600114610dd4576040805162461bcd60e51b8152602060048201526014602482015273159a5c985b185d1854ddd85c0e881313d0d2d15160621b604482015290519081900360640190fd5b6000600d81905580610de4610b65565b50600754604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015610e3857600080fd5b505afa158015610e4c573d6000803e3d6000fd5b505050506040513d6020811015610e6257600080fd5b5051600854604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610eb557600080fd5b505afa158015610ec9573d6000803e3d6000fd5b505050506040513d6020811015610edf57600080fd5b505190506000610ef8836001600160701b038716611d71565b90506000610f0f836001600160701b038716611d71565b90506000610f1d8787612093565b600054909150806111045760065460408051637cd07e4760e01b815290516000926001600160a01b031691637cd07e47916004808301926020929190829003018186803b158015610f6d57600080fd5b505afa158015610f81573d6000803e3d6000fd5b505050506040513d6020811015610f9757600080fd5b505190506001600160a01b038116610fad611ce9565b6001600160a01b0316141561108257806001600160a01b03166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b158015610ff557600080fd5b505afa158015611009573d6000803e3d6000fd5b505050506040513d602081101561101f57600080fd5b50519950891580159061103457506000198a14155b61107d576040805162461bcd60e51b81526020600482015260156024820152744261642064657369726564206c697175696469747960581b604482015290519081900360640190fd5b6110fe565b6001600160a01b038116156110d7576040805162461bcd60e51b815260206004820152601660248201527526bab9ba103737ba103430bb329036b4b3b930ba37b960511b604482015290519081900360640190fd5b6110ef6103e8610a216110ea8888611d0e565b6121d2565b99506110fe60006103e8612223565b50611147565b6111446001600160701b03891661111b8684611d0e565b8161112257fe5b046001600160701b0389166111378685611d0e565b8161113e57fe5b046122ad565b98505b600089116111865760405162461bcd60e51b815260040180806020018281038252602b815260200180612431602b913960400191505060405180910390fd5b6111908a8a612223565b61119c86868a8a611dc1565b81156111c6576009546111c2906001600160701b0380821691600160701b900416611d0e565b600c555b6111ce611ce9565b6001600160a01b03167f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f8585604051808381526020018281526020019250505060405180910390a250506001600d5550949695505050505050565b60016020526000908152604090205481565b600c5481565b60046020526000908152604090205481565b600080600d546001146112a4576040805162461bcd60e51b8152602060048201526014602482015273159a5c985b185d1854ddd85c0e881313d0d2d15160621b604482015290519081900360640190fd5b6000600d819055806112b4610b65565b50600754600854604080516370a0823160e01b815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b15801561131057600080fd5b505afa158015611324573d6000803e3d6000fd5b505050506040513d602081101561133a57600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561138857600080fd5b505afa15801561139c573d6000803e3d6000fd5b505050506040513d60208110156113b257600080fd5b5051306000908152600160205260408120549192506113d18888612093565b600054909150806113e28487611d0e565b816113e957fe5b049a50806113f78486611d0e565b816113fe57fe5b04995060008b118015611411575060008a115b61144c5760405162461bcd60e51b815260040180806020018281038252602b8152602001806123de602b913960400191505060405180910390fd5b61145630846122c5565b611461878d8d611b4f565b61146c868d8c611b4f565b604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b1580156114b257600080fd5b505afa1580156114c6573d6000803e3d6000fd5b505050506040513d60208110156114dc57600080fd5b5051604080516370a0823160e01b815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b15801561152857600080fd5b505afa15801561153c573d6000803e3d6000fd5b505050506040513d602081101561155257600080fd5b5051935061156285858b8b611dc1565b811561158c57600954611588906001600160701b0380821691600160701b900416611d0e565b600c555b8b6001600160a01b031661159e611ce9565b6001600160a01b03167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364968d8d604051808381526020018281526020019250505060405180910390a35050505050505050506001600d81905550915091565b604051806040016040528060038152602001620564c560ec1b81525081565b6000610ba3611628611ce9565b8484611fe5565b6103e881565b600d54600114611683576040805162461bcd60e51b8152602060048201526014602482015273159a5c985b185d1854ddd85c0e881313d0d2d15160621b604482015290519081900360640190fd5b6000600d55600754600854600954604080516370a0823160e01b815230600482015290516001600160a01b03948516949093169261172c9285928792611727926001600160701b03169185916370a0823191602480820192602092909190829003018186803b1580156116f557600080fd5b505afa158015611709573d6000803e3d6000fd5b505050506040513d602081101561171f57600080fd5b505190611d71565b611b4f565b6117a081846117276009600e9054906101000a90046001600160701b03166001600160701b0316856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156116f557600080fd5b50506001600d5550565b6006546001600160a01b031681565b6008546001600160a01b031681565b42841015611815576040805162461bcd60e51b8152602060048201526015602482015274159a5c985b185d1854ddd85c0e8811561412549151605a1b604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa158015611930573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906119665750886001600160a01b0316816001600160a01b0316145b6119b7576040805162461bcd60e51b815260206004820152601f60248201527f566972616c617461537761703a20494e56414c49445f5349474e415455524500604482015290519081900360640190fd5b6119c2898989611f83565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600d54600114611a38576040805162461bcd60e51b8152602060048201526014602482015273159a5c985b185d1854ddd85c0e881313d0d2d15160621b604482015290519081900360640190fd5b6000600d55600754604080516370a0823160e01b81523060048201529051611b48926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611a8957600080fd5b505afa158015611a9d573d6000803e3d6000fd5b505050506040513d6020811015611ab357600080fd5b5051600854604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611b0057600080fd5b505afa158015611b14573d6000803e3d6000fd5b505050506040513d6020811015611b2a57600080fd5b50516009546001600160701b0380821691600160701b900416611dc1565b6001600d55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b60208310611bfc5780518252601f199092019160209182019101611bdd565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611c5e576040519150601f19603f3d011682016040523d82523d6000602084013e611c63565b606091505b5091509150818015611c91575080511580611c915750808060200190516020811015611c8e57600080fd5b50515b611ce2576040805162461bcd60e51b815260206004820152601d60248201527f566972616c617461537761703a205452414e534645525f4641494c4544000000604482015290519081900360640190fd5b5050505050565b6000611cf433610d61565b15611d08575060131936013560601c611d0b565b50335b90565b6000811580611d2957505080820282828281611d2657fe5b04145b610ba7576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b80820382811115610ba7576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6001600160701b038411801590611ddf57506001600160701b038311155b611e29576040805162461bcd60e51b8152602060048201526016602482015275566972616c617461537761703a204f564552464c4f5760501b604482015290519081900360640190fd5b60095463ffffffff42811691600160e01b90048116820390811615801590611e5957506001600160701b03841615155b8015611e6d57506001600160701b03831615155b15611ed8578063ffffffff16611e9585611e8686612357565b6001600160e01b031690612369565b600a80546001600160e01b03929092169290920201905563ffffffff8116611ec084611e8687612357565b600b80546001600160e01b0392909216929092020190555b600980546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166000908152600160205260409020546120089082611d71565b6001600160a01b038085166000908152600160205260408082209390935590841681522054612037908261238e565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600660009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b1580156120e457600080fd5b505afa1580156120f8573d6000803e3d6000fd5b505050506040513d602081101561210e57600080fd5b5051600c546001600160a01b0382161580159450919250906121be5780156121b957600061214b6110ea6001600160701b03888116908816611d0e565b90506000612158836121d2565b9050808211156121b657600061217a6121718484611d71565b60005490611d0e565b905060006121928361218c8684611d0e565b9061238e565b9050600081838161219f57fe5b04905080156121b2576121b28782612223565b5050505b50505b6121ca565b80156121ca576000600c555b505092915050565b60006003821115612215575080600160028204015b8181101561220f578091506002818285816121fe57fe5b04018161220757fe5b0490506121e7565b50610d73565b8115610d7357506001919050565b600054612230908261238e565b60009081556001600160a01b038316815260016020526040902054612255908261238e565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106122bc57816122be565b825b9392505050565b6001600160a01b0382166000908152600160205260409020546122e89082611d71565b6001600160a01b0383166000908152600160205260408120919091555461230f9082611d71565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b0384168161238657fe5b049392505050565b80820182811015610ba7576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fdfe566972616c617461537761703a20494e53554646494349454e545f4c49515549444954595f4255524e4544566972616c617461537761703a20494e53554646494349454e545f4f55545055545f414d4f554e54566972616c617461537761703a20494e53554646494349454e545f4c49515549444954595f4d494e544544566972616c617461537761703a20494e53554646494349454e545f494e5055545f414d4f554e54566972616c617461537761703a20494e53554646494349454e545f4c4951554944495459a2646970667358221220825b3b478e54a060e064d08cf72ad5d777391381eed5f7c994b390bc953e0b0c64736f6c634300060c0033566972616c617461537761703a204944454e544943414c5f414444524553534553a2646970667358221220c5302df906d9ebe401fea3177ae442c40190bf4d5012010612d82bec6420e5dd64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80635855a25a116100715780635855a25a146101395780637cd07e4714610141578063a2e74af614610149578063c9c653961461016f578063e6a439051461019d578063f46901ed146101cb576100a9565b8063017e7e58146100ae578063094b7415146100d25780631e3dd18b146100da57806323cf3118146100f7578063574f2ba31461011f575b600080fd5b6100b66101f1565b604080516001600160a01b039092168252519081900360200190f35b6100b6610200565b6100b6600480360360208110156100f057600080fd5b503561020f565b61011d6004803603602081101561010d57600080fd5b50356001600160a01b0316610236565b005b6101276102b1565b60408051918252519081900360200190f35b6101276102b7565b6100b661034a565b61011d6004803603602081101561015f57600080fd5b50356001600160a01b0316610359565b6100b66004803603604081101561018557600080fd5b506001600160a01b03813581169160200135166103d4565b6100b6600480360360408110156101b357600080fd5b506001600160a01b03813581169160200135166106f0565b61011d600480360360208110156101e157600080fd5b50356001600160a01b0316610716565b6000546001600160a01b031681565b6001546001600160a01b031681565b6004818154811061021c57fe5b6000918252602090912001546001600160a01b0316905081565b6001546001600160a01b0316331461028f576040805162461bcd60e51b81526020600482015260176024820152762b34b930b630ba30a9bbb0b81d102327a92124a22222a760491b604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60045490565b6040516102c660208201610791565b6020820181038252601f19601f820116604052506040516020018082805190602001908083835b6020831061030c5780518252601f1990920191602091820191016102ed565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012081565b6002546001600160a01b031681565b6001546001600160a01b031633146103b2576040805162461bcd60e51b81526020600482015260176024820152762b34b930b630ba30a9bbb0b81d102327a92124a22222a760491b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b031614156104275760405162461bcd60e51b8152600401808060200182810382526021815260200180612d966021913960400191505060405180910390fd5b600080836001600160a01b0316856001600160a01b03161061044a57838561044d565b84845b90925090506001600160a01b0382166104ad576040805162461bcd60e51b815260206004820152601a60248201527f566972616c617461537761703a205a45524f5f41444452455353000000000000604482015290519081900360640190fd5b6001600160a01b03828116600090815260036020908152604080832085851684529091529020541615610527576040805162461bcd60e51b815260206004820152601960248201527f566972616c617461537761703a20504149525f45584953545300000000000000604482015290519081900360640190fd5b60606040518060200161053990610791565b6020820181038252601f19601f8201166040525090506000838360405160200180836001600160a01b031660601b8152601401826001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f59450846001600160a01b031663485cc95585856040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b0316815260200192505050600060405180830381600087803b15801561060657600080fd5b505af115801561061a573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526003602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560048054600181018255958190527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b60036020908152600092835260408084209091529082529020546001600160a01b031681565b6001546001600160a01b0316331461076f576040805162461bcd60e51b81526020600482015260176024820152762b34b930b630ba30a9bbb0b81d102327a92124a22222a760491b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6125f78061079f8339019056fe60806040526001600d5534801561001557600080fd5b50604080518082018252601581527f566972616c61746153776170204c5020546f6b656e00000000000000000000006020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f74395e1e6331e722a2daafb6a053df80b7ff71036f1a18db088bab1d965fe5db818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600680546001600160a01b031916331790556124dc8061011b6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80636a627842116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a714610575578063d505accf1461057d578063dd62ed3e146105ce578063fff6cae9146105fc576101c4565b8063ba9a7a561461053f578063bc25cf7714610547578063c45a01551461056d576101c4565b80637ecebe00116100d35780637ecebe00146104a657806389afcb44146104cc57806395d89b411461050b578063a9059cbb14610513576101c4565b80636a6278421461045257806370a08231146104785780637464fc3d1461049e576101c4565b806330adf81f11610166578063485cc95511610140578063485cc955146103ee578063572b6c051461041c5780635909c0d5146104425780635a3d54931461044a576101c4565b806330adf81f146103c0578063313ce567146103c85780633644e515146103e6576101c4565b8063095ea7b3116101a2578063095ea7b31461030c5780630dfe16811461034c57806318160ddd1461037057806323b872dd1461038a576101c4565b8063022c0d9f146101c957806306fdde03146102575780630902f1ac146102d4575b600080fd5b610255600480360360808110156101df57600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561021657600080fd5b82018360208201111561022857600080fd5b8035906020019184600183028401116401000000008311171561024a57600080fd5b509092509050610604565b005b61025f610b34565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610299578181015183820152602001610281565b50505050905090810190601f1680156102c65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102dc610b65565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103386004803603604081101561032257600080fd5b506001600160a01b038135169060200135610b8f565b604080519115158252519081900360200190f35b610354610bad565b604080516001600160a01b039092168252519081900360200190f35b610378610bbc565b60408051918252519081900360200190f35b610338600480360360608110156103a057600080fd5b506001600160a01b03813581169160208101359091169060400135610bc2565b610378610ca5565b6103d0610cc9565b6040805160ff9092168252519081900360200190f35b610378610cce565b6102556004803603604081101561040457600080fd5b506001600160a01b0381358116916020013516610cd4565b6103386004803603602081101561043257600080fd5b50356001600160a01b0316610d61565b610378610d78565b610378610d7e565b6103786004803603602081101561046857600080fd5b50356001600160a01b0316610d84565b6103786004803603602081101561048e57600080fd5b50356001600160a01b0316611229565b61037861123b565b610378600480360360208110156104bc57600080fd5b50356001600160a01b0316611241565b6104f2600480360360208110156104e257600080fd5b50356001600160a01b0316611253565b6040805192835260208301919091528051918290030190f35b61025f6115fc565b6103386004803603604081101561052957600080fd5b506001600160a01b03813516906020013561161b565b61037861162f565b6102556004803603602081101561055d57600080fd5b50356001600160a01b0316611635565b6103546117aa565b6103546117b9565b610255600480360360e081101561059357600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c001356117c8565b610378600480360360408110156105e457600080fd5b506001600160a01b03813581169160200135166119cd565b6102556119ea565b600d54600114610652576040805162461bcd60e51b8152602060048201526014602482015273159a5c985b185d1854ddd85c0e881313d0d2d15160621b604482015290519081900360640190fd5b6000600d55841515806106655750600084115b6106a05760405162461bcd60e51b81526004018080602001828103825260288152602001806124096028913960400191505060405180910390fd5b6000806106ab610b65565b5091509150816001600160701b0316871080156106d05750806001600160701b031686105b61070b5760405162461bcd60e51b81526004018080602001828103825260248152602001806124836024913960400191505060405180910390fd5b60075460085460009182916001600160a01b039182169190811690891682148015906107495750806001600160a01b0316896001600160a01b031614155b61079a576040805162461bcd60e51b815260206004820152601860248201527f566972616c617461537761703a20494e56414c49445f544f0000000000000000604482015290519081900360640190fd5b8a156107ab576107ab828a8d611b4f565b89156107bc576107bc818a8c611b4f565b861561087557886001600160a01b03166310d1e85c6107d9611ce9565b8d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561085c57600080fd5b505af1158015610870573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156108bb57600080fd5b505afa1580156108cf573d6000803e3d6000fd5b505050506040513d60208110156108e557600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b15801561093157600080fd5b505afa158015610945573d6000803e3d6000fd5b505050506040513d602081101561095b57600080fd5b5051925060009150506001600160701b0385168a9003831161097e57600061098d565b89856001600160701b03160383035b9050600089856001600160701b03160383116109aa5760006109b9565b89856001600160701b03160383035b905060008211806109ca5750600081115b610a055760405162461bcd60e51b815260040180806020018281038252602781526020018061245c6027913960400191505060405180910390fd5b6000610a27610a15846019611d0e565b610a2187612710611d0e565b90611d71565b90506000610a39610a15846019611d0e565b9050610a5f6305f5e100610a596001600160701b038b8116908b16611d0e565b90611d0e565b610a698383611d0e565b1015610aae576040805162461bcd60e51b815260206004820152600f60248201526e566972616c617461537761703a204b60881b604482015290519081900360640190fd5b5050610abc84848888611dc1565b886001600160a01b0316610ace611ce9565b60408051858152602081018590528082018f9052606081018e905290516001600160a01b0392909216917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600d55505050505050505050565b604051806040016040528060158152602001742b34b930b630ba30a9bbb0b8102628102a37b5b2b760591b81525081565b6009546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610ba3610b9c611ce9565b8484611f83565b5060015b92915050565b6007546001600160a01b031681565b60005481565b6001600160a01b03831660009081526002602052604081206000199082610be7611ce9565b6001600160a01b03166001600160a01b031681526020019081526020016000205414610c90576001600160a01b0384166000908152600260205260408120610c5491849190610c34611ce9565b6001600160a01b0316815260208101919091526040016000205490611d71565b6001600160a01b038516600090815260026020526040812090610c75611ce9565b6001600160a01b031681526020810191909152604001600020555b610c9b848484611fe5565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6006546001600160a01b03163314610d33576040805162461bcd60e51b815260206004820152601760248201527f566972616c617461537761703a20464f5242494444454e000000000000000000604482015290519081900360640190fd5b600780546001600160a01b039384166001600160a01b03199182161790915560088054929093169116179055565b6005546001600160a01b038281169116145b919050565b600a5481565b600b5481565b6000600d54600114610dd4576040805162461bcd60e51b8152602060048201526014602482015273159a5c985b185d1854ddd85c0e881313d0d2d15160621b604482015290519081900360640190fd5b6000600d81905580610de4610b65565b50600754604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015610e3857600080fd5b505afa158015610e4c573d6000803e3d6000fd5b505050506040513d6020811015610e6257600080fd5b5051600854604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610eb557600080fd5b505afa158015610ec9573d6000803e3d6000fd5b505050506040513d6020811015610edf57600080fd5b505190506000610ef8836001600160701b038716611d71565b90506000610f0f836001600160701b038716611d71565b90506000610f1d8787612093565b600054909150806111045760065460408051637cd07e4760e01b815290516000926001600160a01b031691637cd07e47916004808301926020929190829003018186803b158015610f6d57600080fd5b505afa158015610f81573d6000803e3d6000fd5b505050506040513d6020811015610f9757600080fd5b505190506001600160a01b038116610fad611ce9565b6001600160a01b0316141561108257806001600160a01b03166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b158015610ff557600080fd5b505afa158015611009573d6000803e3d6000fd5b505050506040513d602081101561101f57600080fd5b50519950891580159061103457506000198a14155b61107d576040805162461bcd60e51b81526020600482015260156024820152744261642064657369726564206c697175696469747960581b604482015290519081900360640190fd5b6110fe565b6001600160a01b038116156110d7576040805162461bcd60e51b815260206004820152601660248201527526bab9ba103737ba103430bb329036b4b3b930ba37b960511b604482015290519081900360640190fd5b6110ef6103e8610a216110ea8888611d0e565b6121d2565b99506110fe60006103e8612223565b50611147565b6111446001600160701b03891661111b8684611d0e565b8161112257fe5b046001600160701b0389166111378685611d0e565b8161113e57fe5b046122ad565b98505b600089116111865760405162461bcd60e51b815260040180806020018281038252602b815260200180612431602b913960400191505060405180910390fd5b6111908a8a612223565b61119c86868a8a611dc1565b81156111c6576009546111c2906001600160701b0380821691600160701b900416611d0e565b600c555b6111ce611ce9565b6001600160a01b03167f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f8585604051808381526020018281526020019250505060405180910390a250506001600d5550949695505050505050565b60016020526000908152604090205481565b600c5481565b60046020526000908152604090205481565b600080600d546001146112a4576040805162461bcd60e51b8152602060048201526014602482015273159a5c985b185d1854ddd85c0e881313d0d2d15160621b604482015290519081900360640190fd5b6000600d819055806112b4610b65565b50600754600854604080516370a0823160e01b815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b15801561131057600080fd5b505afa158015611324573d6000803e3d6000fd5b505050506040513d602081101561133a57600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561138857600080fd5b505afa15801561139c573d6000803e3d6000fd5b505050506040513d60208110156113b257600080fd5b5051306000908152600160205260408120549192506113d18888612093565b600054909150806113e28487611d0e565b816113e957fe5b049a50806113f78486611d0e565b816113fe57fe5b04995060008b118015611411575060008a115b61144c5760405162461bcd60e51b815260040180806020018281038252602b8152602001806123de602b913960400191505060405180910390fd5b61145630846122c5565b611461878d8d611b4f565b61146c868d8c611b4f565b604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b1580156114b257600080fd5b505afa1580156114c6573d6000803e3d6000fd5b505050506040513d60208110156114dc57600080fd5b5051604080516370a0823160e01b815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b15801561152857600080fd5b505afa15801561153c573d6000803e3d6000fd5b505050506040513d602081101561155257600080fd5b5051935061156285858b8b611dc1565b811561158c57600954611588906001600160701b0380821691600160701b900416611d0e565b600c555b8b6001600160a01b031661159e611ce9565b6001600160a01b03167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364968d8d604051808381526020018281526020019250505060405180910390a35050505050505050506001600d81905550915091565b604051806040016040528060038152602001620564c560ec1b81525081565b6000610ba3611628611ce9565b8484611fe5565b6103e881565b600d54600114611683576040805162461bcd60e51b8152602060048201526014602482015273159a5c985b185d1854ddd85c0e881313d0d2d15160621b604482015290519081900360640190fd5b6000600d55600754600854600954604080516370a0823160e01b815230600482015290516001600160a01b03948516949093169261172c9285928792611727926001600160701b03169185916370a0823191602480820192602092909190829003018186803b1580156116f557600080fd5b505afa158015611709573d6000803e3d6000fd5b505050506040513d602081101561171f57600080fd5b505190611d71565b611b4f565b6117a081846117276009600e9054906101000a90046001600160701b03166001600160701b0316856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156116f557600080fd5b50506001600d5550565b6006546001600160a01b031681565b6008546001600160a01b031681565b42841015611815576040805162461bcd60e51b8152602060048201526015602482015274159a5c985b185d1854ddd85c0e8811561412549151605a1b604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa158015611930573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906119665750886001600160a01b0316816001600160a01b0316145b6119b7576040805162461bcd60e51b815260206004820152601f60248201527f566972616c617461537761703a20494e56414c49445f5349474e415455524500604482015290519081900360640190fd5b6119c2898989611f83565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600d54600114611a38576040805162461bcd60e51b8152602060048201526014602482015273159a5c985b185d1854ddd85c0e881313d0d2d15160621b604482015290519081900360640190fd5b6000600d55600754604080516370a0823160e01b81523060048201529051611b48926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611a8957600080fd5b505afa158015611a9d573d6000803e3d6000fd5b505050506040513d6020811015611ab357600080fd5b5051600854604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611b0057600080fd5b505afa158015611b14573d6000803e3d6000fd5b505050506040513d6020811015611b2a57600080fd5b50516009546001600160701b0380821691600160701b900416611dc1565b6001600d55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b60208310611bfc5780518252601f199092019160209182019101611bdd565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611c5e576040519150601f19603f3d011682016040523d82523d6000602084013e611c63565b606091505b5091509150818015611c91575080511580611c915750808060200190516020811015611c8e57600080fd5b50515b611ce2576040805162461bcd60e51b815260206004820152601d60248201527f566972616c617461537761703a205452414e534645525f4641494c4544000000604482015290519081900360640190fd5b5050505050565b6000611cf433610d61565b15611d08575060131936013560601c611d0b565b50335b90565b6000811580611d2957505080820282828281611d2657fe5b04145b610ba7576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b80820382811115610ba7576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6001600160701b038411801590611ddf57506001600160701b038311155b611e29576040805162461bcd60e51b8152602060048201526016602482015275566972616c617461537761703a204f564552464c4f5760501b604482015290519081900360640190fd5b60095463ffffffff42811691600160e01b90048116820390811615801590611e5957506001600160701b03841615155b8015611e6d57506001600160701b03831615155b15611ed8578063ffffffff16611e9585611e8686612357565b6001600160e01b031690612369565b600a80546001600160e01b03929092169290920201905563ffffffff8116611ec084611e8687612357565b600b80546001600160e01b0392909216929092020190555b600980546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166000908152600160205260409020546120089082611d71565b6001600160a01b038085166000908152600160205260408082209390935590841681522054612037908261238e565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600660009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b1580156120e457600080fd5b505afa1580156120f8573d6000803e3d6000fd5b505050506040513d602081101561210e57600080fd5b5051600c546001600160a01b0382161580159450919250906121be5780156121b957600061214b6110ea6001600160701b03888116908816611d0e565b90506000612158836121d2565b9050808211156121b657600061217a6121718484611d71565b60005490611d0e565b905060006121928361218c8684611d0e565b9061238e565b9050600081838161219f57fe5b04905080156121b2576121b28782612223565b5050505b50505b6121ca565b80156121ca576000600c555b505092915050565b60006003821115612215575080600160028204015b8181101561220f578091506002818285816121fe57fe5b04018161220757fe5b0490506121e7565b50610d73565b8115610d7357506001919050565b600054612230908261238e565b60009081556001600160a01b038316815260016020526040902054612255908261238e565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106122bc57816122be565b825b9392505050565b6001600160a01b0382166000908152600160205260409020546122e89082611d71565b6001600160a01b0383166000908152600160205260408120919091555461230f9082611d71565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b0384168161238657fe5b049392505050565b80820182811015610ba7576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fdfe566972616c617461537761703a20494e53554646494349454e545f4c49515549444954595f4255524e4544566972616c617461537761703a20494e53554646494349454e545f4f55545055545f414d4f554e54566972616c617461537761703a20494e53554646494349454e545f4c49515549444954595f4d494e544544566972616c617461537761703a20494e53554646494349454e545f494e5055545f414d4f554e54566972616c617461537761703a20494e53554646494349454e545f4c4951554944495459a2646970667358221220825b3b478e54a060e064d08cf72ad5d777391381eed5f7c994b390bc953e0b0c64736f6c634300060c0033566972616c617461537761703a204944454e544943414c5f414444524553534553a2646970667358221220c5302df906d9ebe401fea3177ae442c40190bf4d5012010612d82bec6420e5dd64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 464,
        "contract": "contracts/uniswapv2/ViralataFactory.sol:ViralataFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 467,
        "contract": "contracts/uniswapv2/ViralataFactory.sol:ViralataFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 470,
        "contract": "contracts/uniswapv2/ViralataFactory.sol:ViralataFactory",
        "label": "migrator",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 477,
        "contract": "contracts/uniswapv2/ViralataFactory.sol:ViralataFactory",
        "label": "getPair",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 481,
        "contract": "contracts/uniswapv2/ViralataFactory.sol:ViralataFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}